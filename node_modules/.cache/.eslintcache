[{"/Users/nc/Desktop/BOT/UI/src/index.js":"1","/Users/nc/Desktop/BOT/UI/src/App.js":"2","/Users/nc/Desktop/BOT/UI/src/reportWebVitals.js":"3","/Users/nc/Desktop/BOT/UI/src/Pages/test.jsx":"4","/Users/nc/Desktop/BOT/UI/src/Pages/testcase.jsx":"5","/Users/nc/Desktop/BOT/UI/src/Pages/header.jsx":"6","/Users/nc/Desktop/BOT/UI/src/Components/modal.jsx":"7","/Users/nc/Desktop/BOT/UI/src/Components/form.jsx":"8","/Users/nc/Desktop/BOT/UI/src/Pages/account.jsx":"9","/Users/nc/Desktop/BOT/UI/src/newheader.jsx":"10","/Users/nc/Desktop/BOT/UI/src/Pages/bot.jsx":"11","/Users/nc/Desktop/BOT/UI/src/Pages/device.jsx":"12","/Users/nc/Desktop/BOT/UI/src/Pages/selectDevice.jsx":"13","/Users/nc/Desktop/BOT/UI/src/firebase.js":"14","/Users/nc/Desktop/BOT/UI/src/Repositories/accountRepos.js":"15","/Users/nc/Desktop/BOT/UI/src/Pages/agencyDeviceManagement.jsx":"16","/Users/nc/Desktop/BOT/UI/src/Pages/agency.jsx":"17","/Users/nc/Desktop/BOT/UI/src/Components/loading.jsx":"18","/Users/nc/Desktop/BOT/UI/src/Repositories/agencyRepos.js":"19","/Users/nc/Desktop/BOT/UI/src/Repositories/deviceRepos.js":"20","/Users/nc/Desktop/BOT/UI/src/Pages/selectAccount.jsx":"21","/Users/nc/Desktop/BOT/UI/src/Pages/login.jsx":"22","/Users/nc/Desktop/BOT/UI/src/Pages/logout.jsx":"23","/Users/nc/Desktop/BOT/UI/src/Components/alert.jsx":"24","/Users/nc/Desktop/BOT/UI/src/Pages/Actions/ImageComment.jsx":"25","/Users/nc/Desktop/BOT/UI/src/Pages/Actions/likePost.jsx":"26","/Users/nc/Desktop/BOT/UI/src/Pages/Actions/comment.jsx":"27"},{"size":536,"mtime":1688740559807,"results":"28","hashOfConfig":"29"},{"size":2190,"mtime":1688743718460,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1683822208000,"results":"31","hashOfConfig":"29"},{"size":6610,"mtime":1686304287236,"results":"32","hashOfConfig":"29"},{"size":7064,"mtime":1683822208000,"results":"33","hashOfConfig":"29"},{"size":1746,"mtime":1688898674147,"results":"34","hashOfConfig":"29"},{"size":1308,"mtime":1688048327918,"results":"35","hashOfConfig":"29"},{"size":4626,"mtime":1689250522267,"results":"36","hashOfConfig":"29"},{"size":9270,"mtime":1689178990811,"results":"37","hashOfConfig":"29"},{"size":11178,"mtime":1686304228683,"results":"38","hashOfConfig":"29"},{"size":9033,"mtime":1689687013673,"results":"39","hashOfConfig":"29"},{"size":8865,"mtime":1689251951105,"results":"40","hashOfConfig":"29"},{"size":5234,"mtime":1688286533464,"results":"41","hashOfConfig":"29"},{"size":801,"mtime":1688026218756,"results":"42","hashOfConfig":"29"},{"size":2755,"mtime":1689179015127,"results":"43","hashOfConfig":"29"},{"size":283,"mtime":1688048400694,"results":"44","hashOfConfig":"29"},{"size":5515,"mtime":1688296752694,"results":"45","hashOfConfig":"29"},{"size":191,"mtime":1688038158998,"results":"46","hashOfConfig":"29"},{"size":2211,"mtime":1688746640894,"results":"47","hashOfConfig":"29"},{"size":2745,"mtime":1689251920009,"results":"48","hashOfConfig":"29"},{"size":3145,"mtime":1688688989958,"results":"49","hashOfConfig":"29"},{"size":6074,"mtime":1688963013679,"results":"50","hashOfConfig":"29"},{"size":255,"mtime":1688743728645,"results":"51","hashOfConfig":"29"},{"size":606,"mtime":1688963284964,"results":"52","hashOfConfig":"29"},{"size":4185,"mtime":1689501126512,"results":"53","hashOfConfig":"29"},{"size":1355,"mtime":1689925320615,"results":"54","hashOfConfig":"29"},{"size":2172,"mtime":1689867012977,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"uga0a5",{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"59"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"59"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"59"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},"/Users/nc/Desktop/BOT/UI/src/index.js",[],[],[],"/Users/nc/Desktop/BOT/UI/src/App.js",["156","157"],[],"import React, { useEffect } from \"react\"\nimport { Routes, Route, BrowserRouter as Router, Navigate } from \"react-router-dom\"\nimport Cookies from \"js-cookie\";\n// import logo from './logo.svg';\n// import './App.css';\nimport Header from \"./Pages/header.jsx\";\nimport BOT from \"./Pages/bot.jsx\";\nimport TestCaseManagement from \"./Pages/testcase.jsx\";\nimport Account from \"./Pages/account.jsx\";\nimport Device from \"./Pages/device.jsx\";\nimport Management from \"./Pages/agencyDeviceManagement.jsx\";\nimport Agency from \"./Pages/agency.jsx\";\nimport Login from \"./Pages/login.jsx\";\nimport Logout from \"./Pages/logout.jsx\";\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\nconst App = () => {\n  const currentPath = window.location.pathname;\n  const validateAgentID = () => {\n    const agentID = Cookies.get('agentID');\n   \n\n    if (!agentID && currentPath !== '/login') {\n      return <Navigate to=\"/login\" replace />;\n    }\n\n    return null;\n  }\n\n  useEffect(()=>{\n    validateAgentID()\n  },[currentPath])\n\n  return (\n\n    <div className=\"app\">\n\n      <Router>\n        {validateAgentID()}\n        <Routes>\n          <Route path=\"/login\" element={<Login />} />\n        </Routes>\n        <Header></Header>\n        <br />\n        <Routes>\n          <Route path=\"/\" element={<BOT />} />\n          <Route path=\"/bot\" element={<BOT />} />\n          <Route path=\"/test-case\" element={<TestCaseManagement />} />\n          <Route path=\"/device-management\" element={<Device />} />\n          <Route path=\"/agency-management\" element={<Agency />} />\n          <Route path=\"/account-management\" element={<Account />} />\n          <Route path=\"/logout\" element={<Logout />} />\n        </Routes>\n      </Router>\n\n    </div>\n  )\n}\nexport default App\n\n","/Users/nc/Desktop/BOT/UI/src/reportWebVitals.js",[],[],"/Users/nc/Desktop/BOT/UI/src/Pages/test.jsx",["158","159","160","161","162"],[],"import { useState, useEffect } from \"react\";\r\n\r\nconst Test = () => {\r\n\r\n    const [selected, setSelected] = useState([])\r\n    const [isSelect, setSelect] = useState(false)\r\n    let row = 10, i = 1\r\n    const [data, setData] = useState()\r\n    const [progress, setProgress] = useState(0)\r\n    const list = []\r\n    useEffect(() => {\r\n        for (i; i <= row; i++) {\r\n            list.push(\r\n                <tr>\r\n                    <td>{i}</td>\r\n                    <td>LXI_{i}</td>\r\n                    <td>This is test case {i}</td>\r\n                    <td>\r\n                        <div id={`teststatus_${i}`}>\r\n                            {/* <span className=\"badge bg-primary test-status\">To Do</span> */}\r\n                            {/*<span className=\"text-success\"><i className=\"bi bi-check-lg\"></i></span>*/}\r\n                            <div class=\"spinner-border spinner-border-sm text-primary\" role=\"status\">\r\n                                <span class=\"visually-hidden\">Loading...</span>\r\n                            </div>\r\n                        </div>\r\n                    </td>\r\n                    <td>\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input test-cases-checkbox\" type=\"checkbox\" value={false} id={i} />\r\n\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            )\r\n\r\n        }\r\n        setData(list)\r\n    }, [])\r\n\r\n    const runTest = () => {\r\n        let value = 10\r\n        let result = progress + value\r\n        if (result <= 100) {\r\n            setProgress(result)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const progressBar = document.querySelector('.progress-bar');\r\n\r\n        if (progress <= 100) {\r\n            progressBar.style.width = `${progress}%`;\r\n            progressBar.setAttribute('aria-valuenow', progress);\r\n            progressBar.textContent = `${progress}%`;\r\n\r\n        }\r\n        if (progress === 100) {\r\n            progressBar.className = 'progress-bar bg-success'\r\n        }\r\n\r\n    }, [progress]);\r\n\r\n    function selectAll(event) {\r\n        const target = event.target\r\n        const value = target.checked\r\n        const tc_checkbox = document.querySelectorAll('.test-cases-checkbox')\r\n        tc_checkbox.forEach((testCaseBox) => {\r\n            testCaseBox.checked = value\r\n            if (value)\r\n                //Modify to if value is true and update the selected test cases state array\r\n                console.log(testCaseBox.id)\r\n        })\r\n\r\n    }\r\n    // useEffect(()=>{\r\n    //     let isSelectAll = document.getElementById('checkAll').checked\r\n    //     let tc_checkbox = document.querySelectorAll('.test-cases-checkbox')\r\n    //     setSelect(isSelectAll)\r\n    // },[isSelectAll])\r\n\r\n\r\n    return (\r\n        <div className=\"container-md\">\r\n             <div className=\"filter\" id=\"filter\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-4\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-2\">\r\n                                <label htmlFor=\"#type\" className=\"form-label\">Network</label>\r\n                            </div>\r\n                            <div className=\"col-8\">\r\n                                <select name=\"type\" id=\"type\" className=\"form-select\">\r\n                                    <option value=\"all\">All</option>\r\n                                    <option value=\"Keysight\">Keysight Network</option>\r\n                                    <option value=\"DLAN\">Direct LAN</option>\r\n                                    <option value=\"DHCPv4\">DHCP (IPv4)</option>\r\n                                    <option value=\"DHCPv6\">DHCP (IPv6)</option>\r\n                                    <option value=\"private\">Private (Switch)</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                    <div className=\"col-6\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-2\">\r\n                                <label htmlFor=\"#lxi-version\" className=\"form-label\">LXI Version</label>\r\n                            </div>\r\n                            <div className=\"col-6\">\r\n                                <select name=\"version\" id=\"version\" className=\"form-select\">\r\n                                    <option value=\"all\">All</option>\r\n                                    <option value=\"1.5\">1.5</option>\r\n                                    <option value=\"1.6\">1.6</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-2\">\r\n                        <div className=\"row\">\r\n                            <button className=\"col-6 btn btn-outline-primary\"><i className=\"bi bi-filter\"></i> Filter</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div> \r\n            <br /><hr /><br />\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                    Select Test Cases\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <table className=\"table table-bordered\">\r\n                        <thead className=\"table-dark\">\r\n                            <tr>\r\n                                <th>No.</th>\r\n                                <th>Test Cases</th>\r\n                                <th width=\"50%\">Description</th>\r\n                                <th>Status</th>\r\n                                <th>Action  <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"checkAll\" onChange={selectAll} /></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data}\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"text-center\">\r\n                        <button className=\"btn btn-dark\" id=\"RunTest\" onClick={runTest}>Run</button>\r\n                    </div>\r\n                    <br /><br />\r\n                    <div className=\"progress\">\r\n                        <div className=\"progress-bar\" role=\"progressbar\" Style={`width: ${progress}%;`}\r\n                            aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">{progress}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Test",[],"/Users/nc/Desktop/BOT/UI/src/Pages/testcase.jsx",["163","164","165"],[],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Modal from \"../Components/modal\";\r\nimport Form from \"../Components/form\";\r\nconst TestCaseManagement = () => {\r\n    const [cases, setCases] = useState()\r\n    const form = [\r\n       \r\n        {name:\"network\",type:\"select\",label:\"Network\",id:\"network\",options:[\r\n            {value:\"Keysight Network\",label:\"Keysight Network\"},\r\n            {value:\"DLAN\",label:\"DLAN\"},\r\n            {value:\"DHCPv4\",label:\"DHCP (IPv4)\"},\r\n            {value:\"DHCPv6\",label:\"DHCP (IPv6)\"},\r\n            {value:\"private\",label:\"Private (Switch)\"}\r\n        ]},\r\n        {name:\"lxi-version\",type:\"select\",label:\"LXI-version\",id:\"lxi-version\",options:[\r\n            {value:\"1.5\",label:\"1.5\"},\r\n            {value:\"1.6\",label:\"1.6\"}\r\n        ]},\r\n         {name:\"os\",type:\"select\",label:\"Operating System\",id:\"os\",options:[\r\n            {value:\"All\",label:\"ALL\"},\r\n            {value:\"Windows\",label:\"Windows\"},\r\n            {value:\"Linux\",label:\"Linux\"}\r\n         ]},\r\n         {name:\"tc_name\",type:\"text\",label:\"Test Case Name\",id:\"tc_name\"},\r\n         {name:\"description\",type:\"text\",label:\"Test Description\",id:\"description\"},\r\n         {name:\"function\",type:\"text\",label:\"Pointed Function\",id:\"function\"},\r\n        \r\n    ]\r\n\r\n    return (\r\n        <div className=\"container-lg\">\r\n            {/* Modal Tag place here */}\r\n            <Modal title=\"Add Test Case\" content={<Form formFields={form}/>}/>\r\n            <div className=\"card\">\r\n                <div className=\"card-header\">Test Cases</div>\r\n                <div className=\"card-body\">\r\n                    <br />\r\n\r\n                    <div className=\"text-start\">\r\n                    <button type=\"button\" class=\"btn btn-outline-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#modal\">\r\n                            <i className=\"bi bi-plus-circle\"></i> Test Case\r\n                        </button>\r\n                    </div>\r\n                    <br />\r\n                    <hr />\r\n                    <br />\r\n                    <div className=\"filter\" id=\"filter\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-4\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-3\">\r\n                                        <label htmlFor=\"#type\" className=\"form-label\">Network</label>\r\n                                    </div>\r\n                                    <div className=\"col-8\">\r\n                                        <select name=\"type\" id=\"type\" className=\"form-select\">\r\n                                            <option value=\"all\">All</option>\r\n                                            <option value=\"Keysight\">Keysight Network</option>\r\n                                            <option value=\"DLAN\">Direct LAN</option>\r\n                                            <option value=\"DHCPv4\">DHCP (IPv4)</option>\r\n                                            <option value=\"DHCPv6\">DHCP (IPv6)</option>\r\n                                            <option value=\"private\">Private (Switch)</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n                            <div className=\"col-3\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-4\">\r\n                                        <label htmlFor=\"#lxi-version\" className=\"form-label\">LXI Version</label>\r\n                                    </div>\r\n                                    <div className=\"col-8\">\r\n                                        <select name=\"version\" id=\"version\" className=\"form-select\">\r\n                                            <option value=\"all\">All</option>\r\n                                            <option value=\"1.5\">1.5</option>\r\n                                            <option value=\"1.6\">1.6</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-5\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-4\">\r\n                                        <label htmlFor=\"#os\" className=\"form-label\">Operating System</label>\r\n                                    </div>\r\n                                    <div className=\"col-8\">\r\n                                        <select name=\"os\" id=\"os\" className=\"form-select\">\r\n                                            <option value=\"all\">All</option>\r\n                                            <option value=\"Windows\">Windows</option>\r\n                                            <option value=\"Linux\">Linux</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                           \r\n                        </div>\r\n                        <br /><br />\r\n                        <div className=\"row\">\r\n                            <div className=\"text-center\">\r\n                                <button className=\"btn btn-outline-primary\">\r\n                                    <i className=\"bi bi-filter\"></i> Filter\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                    <hr />\r\n                    <br />\r\n\r\n                    {/*Table*/}\r\n                    <table className=\"table table-borderless\">\r\n                        <thead className=\"table-dark\">\r\n                            <tr>\r\n                                <th>No.</th>\r\n                                <th>Test Case</th>\r\n                                <th>Description</th>\r\n                                <th>LXI Version</th>\r\n                                <th>OS</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>1</td>\r\n                                <td>TC_1.5_001</td>\r\n                                <td>Ensure Instrument IP is accessible</td>\r\n                                <td>1.5</td> \r\n                                <td>Windows and Linux</td>\r\n                                <td>\r\n                                    <button className=\"btn\">\r\n                                        <i className=\"bi bi-pencil\"></i>\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default TestCaseManagement","/Users/nc/Desktop/BOT/UI/src/Pages/header.jsx",[],[],"/Users/nc/Desktop/BOT/UI/src/Components/modal.jsx",[],[],"/Users/nc/Desktop/BOT/UI/src/Components/form.jsx",["166","167","168","169"],[],"import React from \"react\";\r\nimport { useState, useEffect,useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Form = ({ formFields, onSubmit, data }) => {\r\n    const [formData, setFormData] = useState({})\r\n    const [valid, setValid] = useState(false)\r\n    const [errorMsg, setErrorMsg] = useState()\r\n\r\n    const [value, setValue] = useState()\r\n    const closeButtonRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            setFormData({})\r\n            setFormData(data)\r\n        }\r\n    }, [data])\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target\r\n\r\n        setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\r\n    };\r\n\r\n    const validation = () => {\r\n        const errors = []\r\n        formFields.forEach((field) => {\r\n            if (formData[field.name] === undefined || formData[field.name] === \"\") {\r\n                errors.push(<li>[ {field.label} ] is required</li>)\r\n\r\n                //Add each error into an array and print below \r\n                //make use of useEffect\r\n\r\n            }\r\n        });\r\n        return errors\r\n\r\n    }\r\n\r\n    const formSubmit = (event) => {\r\n        event.preventDefault()\r\n        const errors = validation()\r\n        setValid(errors.length === 0)\r\n        setErrorMsg(errors)\r\n\r\n        if (errors.length === 0) {\r\n            \r\n            onSubmit(formData)\r\n            closeButtonRef.current.click();\r\n            event.target.reset()\r\n            setFormData({})\r\n            setValid(false)\r\n        }\r\n\r\n    }\r\n\r\n    function closeModal() {\r\n        let close = document.querySelector('#closeModal')\r\n        close.click()\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-12\">\r\n                <div className={valid ? 'collapse' : ''}>\r\n                    <ul className=\"text-danger\">\r\n                        {\r\n                            errorMsg\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                {\r\n                    valid && <div className=\"alert alert-primary\">Processing</div>\r\n                }\r\n                <form onSubmit={formSubmit} autoComplete=\"off\">\r\n                    {   formFields.length > 0 &&\r\n                        formFields.map((field, index) =>\r\n                            <div className=\"mb-3\" key={index}>\r\n                                <label htmlFor={field.id} className=\"form-label\">{field.label}</label>\r\n                                {\r\n                                    // field.type === 'input'?\r\n                                    // (<input type={field.type} classname=\"form-control\" id={field.id}/>):\r\n                                    field.type === 'select' ?\r\n                                        (<select className=\"form-select\" name={field.name} onChange={handleInputChange} value={formData[field.name] || ''} >\r\n                                            <option value=\"\">Please Select</option>\r\n                                            {field.options.map((option) =>\r\n                                                <option key={option.value} value={option.value} selected={formData[field.name] && option.value === formData[field.name]}>{option.label}</option>\r\n                                            )}\r\n                                        </select>) :\r\n                                        (<input type={field.type} name={field.name} className=\"form-control\" id={field.id}      value={\r\n                                           formData ? formData[field.name] : ''\r\n                                            \r\n                                        }\r\n                                         onChange={handleInputChange}  />)\r\n\r\n                                }\r\n                            </div>\r\n\r\n                        )\r\n                    }\r\n                    <div className=\"text-center\">\r\n                        <button className=\"btn btn-dark\">Submit</button>\r\n                        <div className=\"collapse\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-secondary\"\r\n                                data-bs-dismiss=\"modal\"\r\n                                id=\"closeModal\"\r\n                                ref={closeButtonRef}\r\n                            >\r\n                                Close\r\n                            </button>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","/Users/nc/Desktop/BOT/UI/src/Pages/account.jsx",["170","171","172","173","174","175"],[],"import { useState, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\nimport Form from \"../Components/form\";\nimport Modal from \"../Components/modal\";\nimport loading from \"../Components/loading\";\nimport { getDevices } from \"../Repositories/deviceRepos\";\nimport { getAccountByDevice, createAcc, updateAcc, deleteAcc, retrieveAcc } from \"../Repositories/accountRepos\";\nimport Alert from \"../Components/alert\";\nconst Account = () => {\n\n    const [errors, setErrors] = useState([])\n    const [message, setMessage] = useState(\"\")\n    const [isLoading, setisLoading] = useState(false)\n    const [showAlert, setShowAlert] = useState(false)\n    const agency = Cookies.get(\"agentID\")\n    const agencyName = Cookies.get(\"agentName\");\n    const [accountsList, setAccountList] = useState([])\n    const [accountData, setAccountData] = useState()\n    const [deviceList, setDeviceList] = useState([])\n    const [selectedDevice, setSelectedDevice] = useState([])\n\n    const [accountDetail,setAccountDetail] = useState([])\n\n    \n    const displayLoading = () => {\n        setisLoading(true)\n        setTimeout(() => {\n            setisLoading(false)\n        }, 2000);\n    }\n    useEffect(() => {\n        displayLoading()\n        setAccountList([])\n    }, [selectedDevice])\n    const fetchDevices = async () => {\n        try {\n            let data = await getDevices(agency)\n            if (data) {\n                setDeviceList(data)\n            }\n            else {\n                setDeviceList([])\n            }\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    //Fetch All Devices in initial\n    useEffect(() => {\n        fetchDevices()\n    }, [])\n\n    const handleDeviceChange = (e) => {\n        let selected = e.target.value\n        setSelectedDevice(selected)\n    }\n\n    const fetchAccountList = async () => {\n        try {\n            let accounts = await getAccountByDevice(selectedDevice)\n            if (accounts) {\n                setAccountList(accounts)\n            }\n            else {\n                setAccountList([])\n            }\n\n        } catch (error) {\n        }\n    }\n\n    useEffect(() => {\n        fetchAccountList()\n    }, [selectedDevice])\n\n    // CRUD\n\n    const addAccount = async (accountData) => {\n        let newData = Object.assign({}, accountData, { agency: agency })\n        try {\n            let newAccount = await createAcc(newData)\n            if (newAccount) {\n                setMessage(\"New Account has been created\")\n                setShowAlert(true)\n                fetchAccountList()\n            }\n\n        }\n        catch (error) { }\n    }\n\n    const deleteAccount = async (id) => {\n     \n  \n        try {\n            const deleteAction = await deleteAcc(id)\n            if (deleteAction) {\n                setMessage(\"Account has been deleted\")\n                setShowAlert(true)\n                fetchAccountList()\n            }\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    const fetchAccount = async(id)=>{\n       let thisAccount = await retrieveAcc(id)\n       if (thisAccount){\n            setAccountData(thisAccount)\n           \n        }\n    }\n\n    useEffect(()=>{\n        console.log(accountData)\n    },[accountData])\n\n    const editAccount = async(data)=>{\n        if(data){\n            try{\n                let update = await updateAcc(data)\n                if(update){\n                    setMessage(\"Account updated\")\n                    setShowAlert(true)\n                    fetchAccountList()\n\n                }\n            }catch(error){}\n        \n        }\n    }\n\n    const formData = [\n        { name: 'id', type: 'text', label: 'Facebook ID', id: 'facebook-id' },\n        { name: 'password', type: 'password', label: 'Password', id: 'facebook-pass' },\n        { name: 'otp', type: 'text', label: 'One-Time Password', id: 'fb-otp' },\n        {\n            name: 'device_id', type: 'select', label: 'Run On Device', id: 'fb-device_id',\n            options: deviceList.map((device) => ({\n                value: device.device_id,\n                label: device.device_name\n\n            }))\n\n        }\n\n\n    ]\n\n\n\n    return (\n        <main className=\"main\" id=\"main\">\n            <div className=\"container-md\">\n                {/** Modal Place Here */}\n                <Modal title={\"Add Account (\" + agencyName + \")\"} modalID=\"addAccountModal\" content={<Form formFields={formData} onSubmit={addAccount} />} data=\"\" />\n                <Modal title={\"Edit Account (\" + agencyName + \")\"} modalID=\"editAccountModal\" content={<Form formFields={formData} onSubmit={editAccount} data={accountData}/>} />\n                {/** End Modal Place Here */}\n                <div className=\"card\">\n                    <div className=\"card-header\">Account Management</div>\n                    <div className=\"card-body\">\n                        <br />\n                        {/**Alert */}\n                        {showAlert && <Alert status=\"success\" message={message} display=\"true\" />}\n                        {/** EndAlert */}\n\n                        <div className=\"text-end\">\n                            <button type=\"button\" className=\"btn btn-outline-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#addAccountModal\">\n                                <i className=\"bi bi-plus-circle\"></i> Account\n                            </button>\n                        </div>\n                        <br />\n                        <br />\n                        {/**filter */}\n                        <div className=\"filter\">\n                            <div className=\"row\">\n                                <div className=\"col-8\">\n                                    <div className=\"row\">\n                                        <div className=\"col-4\">\n                                            <label htmlFor=\"device\" className=\"form-label\">Select Device</label>\n                                        </div>\n                                        <div className=\"col-8\">\n                                            <select name=\"device\" id=\"device\" className=\"form-select\" onChange={handleDeviceChange}>\n                                                <option value=\"\">Please Select</option>\n                                                {\n                                                    deviceList && deviceList.map((device, index) => (\n                                                        <option value={device.device_id} key={index}>{device.device_name}</option>\n                                                    ))\n                                                }\n                                            </select>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        {/** End filter */}\n                        <br />\n                        <br />\n\n                        <table className=\"table table-borderless\">\n                            <thead className=\"table-dark\">\n                                <tr>\n                                    <th>No.</th>\n                                    <th>Account ID</th>\n                                    <th>Action</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {\n                                    isLoading ? <tr><td colSpan=\"3\">{loading}</td></tr> :\n                                        accountsList.length > 0 ?\n                                            accountsList.map((account, index) => (\n                                                <tr key={index}>\n                                                    <td>{index + 1}</td>\n                                                    <td>{account.id}</td>\n                                                    <td>\n                                                        <button className=\"btn btn-sm\" title=\"Edit Account\" onClick={()=>fetchAccount(account.id)} data-bs-toggle=\"modal\" data-bs-target=\"#editAccountModal\" ><i className=\"bi bi-sliders\"></i>&emsp;Edit</button>\n                                                        &emsp;\n                                                        <button title=\"Delete Account\" className=\"btn btn-sm\" onClick={()=>deleteAccount(account.id)}><i className=\"bi bi-trash text-danger\" ></i>&emsp;Delete</button>\n                                                        &emsp;\n                                                        {/* <button className=\"collapse\" title=\"Edit Account\" data-bs-toggle=\"modal\" data-bs-target=\"#editAccountModal\" id={account.id}  ><i className=\"bi bi-sliders\"></i>&emsp;Edit</button> */}\n                                                        \n                                                    </td>\n                                                </tr>\n                                            )) : <tr><td colSpan=\"3\"><p className=\"text-danger\">No Accounts Found</p></td></tr>\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default Account","/Users/nc/Desktop/BOT/UI/src/newheader.jsx",["176","177","178","179","180","181","182","183","184","185","186","187"],[],"/Users/nc/Desktop/BOT/UI/src/Pages/bot.jsx",["188","189","190","191"],[],"import { useState, useEffect } from \"react\"\nimport loading from \"../Components/loading\"\nimport Cookies from \"js-cookie\"\nimport { getDevices } from \"../Repositories/deviceRepos\"\nimport { getAccountByDevice } from \"../Repositories/accountRepos\"\nimport ImageComment from \"./Actions/ImageComment\"\nimport LikePost from \"./Actions/likePost\"\nimport Comment from \"./Actions/comment\"\nconst BOT = () => {\n    const [isLoading,setIsLoading] = useState(false)\n    const [text, setText] = useState('')\n    const [posts, setPosts] = useState([])\n    const [action, setAction] = useState();\n    const [selectedAgent, setSelectedAgent] = useState(Cookies.get('agentID'))\n    const agentName = Cookies.get(\"agentName\")\n    const [devices, setDevices] = useState([])\n    const [selectedDevice, setSelectedDevice] = useState()\n    const [selectedAccounts, setSelectedAccounts] = useState([])\n    const [accounts, setAccounts] = useState([])\n    const [renderForm, setRenderForm] = useState()\n    \n\n    /*\n        1. Verify action chosen by user\n        2. Render Form depends on action\n            2.1 Read all the neccessory details like get the IP Address of devices and store in the variable / json\n        3. Verify all input are filled\n        4. Sent to server via Axios\n        5. Return result\n\n    */\n\n    useEffect(() => {\n        fetchDevices()\n        setSelectedAccounts([])\n        setSelectedDevice()\n    }, [])\n\n    const handleActionChange = (event) => {\n        let actionValue = event.target.value\n        setAction(actionValue)\n    }\n\n    const fetchDevices = async () => {\n        const this_devices = await getDevices(selectedAgent)\n        setDevices(this_devices)\n    }\n\n    const handleDeviceChange = (e) => {\n        let device = e.target.value\n        setSelectedDevice(device)\n\n    }\n\n    const getAccounts = async () => {\n        setIsLoading(true)\n        const accountList = await getAccountByDevice(selectedDevice)\n        if (accountList) {\n            setAccounts(accountList)\n        } else {\n            setAccounts([])\n        }\n        setTimeout(() => {\n            setIsLoading(false)\n        }, 2000);\n    }\n\n    useEffect(() => {\n        setAccounts([])\n        setSelectedAccounts([])\n        getAccounts()\n    }, [selectedDevice])\n\n    const handleSelectAccount = (e) => {\n        let isChecked = e.target.checked\n        let value = e.target.value\n        if (isChecked) {\n\n            setSelectedAccounts(account => [...account, value]);\n            //console.log(selectedAccounts)\n        }\n        else {\n\n            const accountList = selectedAccounts.filter((account) => account !== value)\n            setSelectedAccounts(accountList)\n        }\n    }\n\n    useEffect(() => {\n        const data = {accounts:selectedAccounts,posts:posts}\n        if (action === '1') {\n            setRenderForm(<LikePost accounts={selectedAccounts} posts={posts}/>)\n            //setRenderForm(<LikePost accounts={selectedAccounts}/>)\n        }\n\n        if(action==='2'){\n            setRenderForm(<Comment data={data}/>)\n        }\n\n        if(action === '3'){\n            setRenderForm(<ImageComment data={data} />)\n        }\n    }, [action, selectedAccounts,posts])\n\n    const handlePostField = (e) =>{\n        let textValues = e.target.value\n        setText(textValues)\n    }\n\n    const wrappedPostLink = () =>{\n        const lines = text.split('\\n').filter(line => line.trim());\n        setPosts(lines)\n    }\n\n    useEffect(()=>{\n        wrappedPostLink()\n    },[text])\n\n   \n\n\n\n    return (\n        <main className=\"main\" id=\"main\">\n            <div className=\"container-md\">\n\n                <div className=\"card\">\n                    <div className=\"card-header\">\n                        {agentName}\n                    </div>\n                    <div className=\"card-body\">\n                        <br />\n                        {/**Filter Device */}\n                        <div className=\"device-filter\">\n                            <div className=\"row\">\n                                <div className=\"col-8\">\n                                    <div className=\"row\">\n                                        <div className=\"col-2\">\n                                            <label htmlFor=\"#device\">Device</label>\n                                        </div>\n                                        <div className=\"col-8\">\n                                            {\n                                                <select name=\"deviceOption\" id=\"deviceSelect\" className=\"form-select\" onChange={handleDeviceChange}>\n                                                    <option value=\"\">Select Devices</option>\n                                                    {\n                                                        devices && devices.map((device, index) => (\n                                                            <option value={device.device_id} key={index}>{device.device_name}</option>\n                                                        ))\n                                                    }\n                                                </select>\n                                            }\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        {/** End Filter Device */}\n\n                        <br />\n                        <table className=\"table table-bordered\">\n                            <thead>\n                                <tr>\n                                    <th>No.</th>\n                                    <th>Account ID</th>\n                                    <th>Action</th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {   isLoading?<tr><td colSpan=\"4\">{loading}</td></tr>:\n                                    accounts.length > 0 ? accounts.map((account, index) => (\n                                        <tr key={index + 1}>\n\n                                            <td>{index + 1}</td>\n                                            <td>{account.id}</td>\n                                            <td>\n                                                <input type=\"checkbox\" id={account.id} value={account.id} className=\"form-input-check\" onChange={handleSelectAccount} />\n                                            </td>\n                                        </tr>\n                                    )) : <tr><td colSpan=\"3\">No Data </td></tr>\n                                }\n                            </tbody>\n\n\n                        </table>\n\n\n                    </div>\n                </div>\n                <br />\n\n                {/** Action Card */}\n                <div className=\"card\">\n                    <div className=\"card-header\">Action</div>\n                    <div className=\"card-body\">\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-8\">\n                                <div className=\"row\">\n                                    <div className=\"col-2\">\n                                        <label htmlFor=\"#type\" className=\"form-label\">Action</label>\n                                    </div>\n                                    <div className=\"col-10\">\n                                        <select name=\"\" id=\"\" className=\"form-select\" value={action} onChange={handleActionChange}>\n                                            <option value=\"\">Choose Action</option>\n                                            <option value=\"1\">Like Post</option>\n                                            <option value=\"2\">Like & Reply Comment</option>\n                                            <option value=\"3\">Reply Comment with Image</option>\n                                        </select>\n                                    </div>\n                                </div>\n\n\n                            </div>\n                        </div>\n                        <br />\n                        <div className=\"row\">\n                            <div className=\"col-8\">\n                                <div className=\"row\">\n                                    <div className=\"col-2\">\n                                        <label htmlFor=\"#post\" className=\"form-label\">Post Link(s)</label>\n                                    </div>\n                                    <div className=\"col-10\">\n                                        <textarea name=\"\" id=\"post\" cols=\"30\" rows=\"10\" className=\"form-control\" onChange={handlePostField}></textarea>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <br />\n                        {renderForm}\n                    </div>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default BOT;\n","/Users/nc/Desktop/BOT/UI/src/Pages/device.jsx",["192","193","194","195","196","197","198","199"],[],"import { useState, useEffect } from \"react\"\nimport Form from \"../Components/form\"\nimport Modal from \"../Components/modal\"\nimport axios from \"axios\"\nimport loading from \"../Components/loading\"\nimport { getAllAgents } from \"../Repositories/agencyRepos\"\nimport { createDevice, retrieveDevice, getDevices, updateDevice , deleteDevice} from \"../Repositories/deviceRepos\"\nimport Cookies from \"js-cookie\"\nconst Device = () => {\n\n    const [devices, setDevices] = useState([])\n    const [deviceDetail, setDeviceDetail] = useState()\n    const [isAlertShow, setAlertShow] = useState(false)\n    const [errors, setErrors] = useState([])\n    const [message, setMessage] = useState()\n\n    //agency useState\n    const agency = Cookies.get(\"agentID\")\n    const agencyName = Cookies.get(\"agentName\")\n\n    //useState for selectedAgency for filtering\n    const [selectedAgent, setSelectedAgent] = useState('')\n\n    //variable to render devices\n    const [renderDevice, setRenderDevice] = useState()\n    const [isLoading, setIsLoading] = useState(false)\n\n    useEffect(() => {\n        getAllDevices()\n    }, [])\n\n\n    const addDevice = async (data) => {\n        // try {\n        //     await axios.post('http://127.0.0.1:5000/addDevice', data).then(response => {\n        //         if (response.data.status === 200) {\n        //             setMessage(\"Device added !\")\n        //             getAllDevices()\n        //             setAlertShow(true)\n        //             setTimeout(() => {\n        //                 setAlertShow(false)\n        //             }, 3000);\n\n        //         }\n        //     })\n        // } catch (error) {\n        //     console.log(error)\n        // }\n        const newDevice = await createDevice(agency, data)\n        if (newDevice) {\n            setAlertShow(true)\n            setMessage(\"Device added !\")\n            setTimeout(() => {\n                setAlertShow(false)\n            }, 3000);\n\n        }\n\n    }\n\n\n\n    const getAllDevices = async () => {\n        setIsLoading(true)\n        try{\n            let devicesList = await getDevices(agency)\n\n            if(devicesList){\n                setDevices(devicesList)\n                setTimeout(() => {\n                    setIsLoading(false)\n                }, 1000);\n            }\n        }catch(error){}\n    }\n\n    const getDevice = async (device_id) => {\n       console.log(device_id)\n        let devicedata = await retrieveDevice(agency,device_id)\n        //console.log({aid:agencyID,did:device_id})\n        console.log(devicedata)\n        if (devicedata) {\n            setDeviceDetail(devicedata)\n        }\n\n    }\n\n   \n\n    const editDevice = async (data) => {\n\n       try{\n           if(data){\n                const update = await updateDevice(data)\n                if(update){\n                    getAllDevices()\n                    setMessage('Device updated')\n                    setAlertShow(true)\n                    setTimeout(() => {\n                        setAlertShow(false)\n                    }, 3000);\n                }\n            }\n        }catch(error){\n            console.log(error)\n        }\n    }\n\n\n\n\n    const deleteThisDevice = async (device_id) => {\n        //console.log(device_id)\n        try {\n            let deleted = await deleteDevice(agency,device_id)\n            if(deleted){\n                getAllDevices()\n                setMessage(\"Device deleted\")\n                setAlertShow(true)\n                setTimeout(() => {\n                    setAlertShow(false)\n                }, 3000);\n            }\n        }\n        catch (error) {\n            console.log(error)\n        }\n    }\n\n    //form\n    const formData = [\n        \n        { name: \"device_name\", type: \"text\", label: \"Device Name\", id: 'device_name' },\n        { name: 'device_ip', type: \"text\", label: \"Device's IP\", id: 'device_ip' }\n    ];\n\n\n  \n    // useEffect(() => {\n    //     let this_data = \"\"\n    //     if (isLoading) {\n    //         this_data = <tr><td colSpan=\"3\">{loading}</td></tr>\n    //     }\n    //     else {\n    //         if (devices.length > 0) {\n    //             this_data = devices.map((device, index) => (\n    //                 <tr key={device.device_id}>\n    //                     <td>{index + 1}</td>\n    //                     <td>{device.device_name}</td>\n    //                     <td>{device.device_ip}</td>\n    //                     <td>\n    //                         <button className=\"btn btn-sm\" title=\"Edit Device\" onClick={() => getDevice(device.agencyID, device.device_id)} data-bs-toggle=\"modal\" data-bs-target=\"#editDeviceModal\"><i className=\"bi bi-sliders\"></i>&emsp;Edit</button>\n    //                         &emsp;\n    //                         <button title=\"Delete Device\" className=\"btn btn-sm\" onClick={() => deleteDevice(device.device_id)}><i className=\"bi bi-trash text-danger\"></i>&emsp;Delete</button>\n    //                     </td>\n    //                 </tr>\n    //             ))\n    //         }\n    //         else {\n    //             this_data = <tr><td colSpan=\"2\">No data is shown</td></tr>\n    //         }\n    //     }\n\n\n\n\n    //     setRenderDevice(this_data)\n\n\n    // }, [devices, isLoading])\n\n\n    return (\n        <main className=\"main\" id=\"main\" >\n            <div className=\"container-md\">\n                <Modal title=\"Add Device\" modalID=\"addDeviceModal\" content={<Form formFields={formData} onSubmit={addDevice}data=\"\" />} />\n                <Modal title=\"Edit Device\" modalID=\"editDeviceModal\" content={<Form formFields={formData} onSubmit={editDevice} data={deviceDetail} />} />\n                <div className=\"text-start\">\n                    <a href=\"/agency-management\" className=\"btn btn-primary\">Agency Management</a>\n\n                </div>\n                <br />\n                <div className=\"card\">\n                    <div className=\"card-header\">Device Management ({agencyName})</div>\n                    <div className=\"card-body\">\n                        <br />\n                        {isAlertShow &&\n                            <div className=\"alertDiv\">\n                                <div className={errors.length !== 0 ? 'alert alert-danger' : 'alert alert-success'}>{message}</div>\n                            </div>\n                        }\n\n\n                        <div className=\"text-end\">\n                            <button type=\"button\" className=\"btn btn-outline-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#addDeviceModal\">\n                                <i className=\"bi bi-plus-circle\"></i> Device\n                            </button>\n                        </div>\n\n                        <br />\n                        <br />\n\n                        {/* Filter */}\n                      \n                        {/*End Filter */}\n                        <br /><br />\n\n                        <table className=\"table table-sm table-borderless\">\n                            <thead className=\"table-dark\">\n                                <tr>\n                                    <th>No</th>\n                                    <th width=\"30%\">Devices</th>\n                                    <th width=\"30%\">IP Address</th>\n                                    <th >Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n\n                                {\n                                    isLoading?<tr><td colSpan=\"4\">{loading}</td></tr>:\n                                    devices ?\n                                        devices.map((device, index) => (\n                                            <tr key={device.device_id}>\n                                                <td>{index + 1}</td>\n                                                <td>{device.device_name}</td>\n                                                <td>{device.device_ip}</td>\n                                                <td>\n                                                    <button className=\"btn btn-sm\" title=\"Edit Device\" onClick={() => getDevice(device.device_id)} data-bs-toggle=\"modal\" data-bs-target=\"#editDeviceModal\"><i className=\"bi bi-sliders\"></i>&emsp;Edit</button>\n                                                    &emsp;\n                                                    <button title=\"Delete Device\" className=\"btn btn-sm\" onClick={() => deleteThisDevice(device.device_id)}><i className=\"bi bi-trash text-danger\"></i>&emsp;Delete</button>\n                                                </td>\n                                            </tr>\n                                        ))\n                                    :<tr><td colSpan=\"3\">No Data Found</td></tr>\n                                }\n                            </tbody>\n                        </table>\n\n                    </div>\n                </div>\n            </div>\n        </main>\n    )\n}\n\n\nexport default Device","/Users/nc/Desktop/BOT/UI/src/Pages/selectDevice.jsx",["200","201","202","203","204","205","206","207"],[],"import { useState, useEffect } from \"react\"\nimport axios from \"axios\"\nimport { getDevices } from \"../Repositories/deviceRepos\"\nconst DeviceList = ({ agent, onSelectedDevicesChange }) => {\n    const [devices, setDevices] = useState([])\n    const [errors, setErrors] = useState([])\n    const [message, setMessage] = useState('')\n    const [selectedDevices, setSelectedDevices] = useState([])\n    const [renderDevices, setRenderDevices] = useState()\n    const fetchDevices = async () => {\n        // try {\n        //     await axios.get('http://127.0.0.1:5000/getAllDevices').then(response => {\n        //         if (response.data.status === 200) {\n        //             const device = response.data.devices;\n        //             const devicesArray = Object.keys(device).map((key) => ({\n        //                 name: key,\n        //                 ...device[key],\n        //             }));\n        //             setDevices(devicesArray);\n        //         }\n        //     })\n        // }\n        // catch (error) {\n        //     setMessage('Cannot connect to server')\n        //     setErrors(error)\n        // }\n\n        try {\n            const this_devices = await getDevices(agent) \n            if(this_devices){ // this statement is to prevent set undefined data to device useState hooks\n                setDevices(this_devices)\n            }\n        }\n        catch (error) { \n            console.log(error)\n        }\n\n    }\n\n    useEffect(() => {\n        fetchDevices()\n        setSelectedDevices([])\n    }, [agent])\n\n    // useEffect(() => {\n    //     const render = devices.map((device, index) => (\n    //         <tr key={index}>\n    //             <td>\n    //                 <input className=\"form-check-input device-checkbox\" type=\"checkbox\" onChange={handleSelect(device.device_name, device.device_ip)} />\n    //             </td>\n    //             <th>\n    //                 {device.device_name}\n    //             </th>\n    //             <td>\n    //                 {device.device_ip}\n    //             </td>\n    //         </tr>\n    //     ))\n    //     setRenderDevices(render)\n    // }, [devices])\n\n\n\n    const handleSelect = (deviceName, deviceIP) => (event) => {\n        const isChecked = event.target.checked;\n\n        // setSelectedDevices((prevSelectedDevices) => {\n        //     if (isChecked) {\n        //         // Add the selected device to the selectedDevice state\n        //         return [...prevSelectedDevices,\n        //             {device_name:deviceName,device_ip:deviceIP}\n        //         ];\n        //     } else {\n        //         // Remove the unchecked device from the selectedDevice state\n        //         return prevSelectedDevices.filter((device) => device !== deviceName);\n        //     }\n        // });\n        if (isChecked) {\n            // Add the selected device to the selectedDevices state\n            const updatedDevices = [...selectedDevices, { device_name: deviceName, device_ip: deviceIP }];\n            setSelectedDevices(updatedDevices);\n            //onSelectedDevicesChange(updatedDevices);\n        } else {\n            // Remove the unchecked device from the selectedDevices state\n            const updatedDevices = selectedDevices.filter(\n                (device) => device.device_name !== deviceName\n            );\n            setSelectedDevices(updatedDevices);\n            //onSelectedDevicesChange(updatedDevices);\n        }\n\n\n    };\n\n    useEffect(() => {\n        onSelectedDevicesChange(selectedDevices)\n    }, [selectedDevices])\n\n\n\n    return (\n        <div className=\"device-list\">\n            {\n                errors != 0 &&\n                <div className=\"alert-div\">\n                    <div className=\" alert alert-danger\">{message}</div>\n                </div>\n            }\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <table className=\"table table-hovered\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>PC</th>\n                                <th>IP address</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {\n                              devices.map((device, index) => (\n                                    <tr key={index}>\n                                        <td>\n                                            <input className=\"form-check-input device-checkbox\" type=\"checkbox\" onChange={handleSelect(device.device_name,device.device_ip)} />\n                                        </td>\n                                        <th>\n                                            {device.device_name}\n                                        </th>\n                                        <td>\n                                            {device.device_ip}\n                                        </td>\n                                    </tr>\n                                ))\n                            }\n                           \n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DeviceList","/Users/nc/Desktop/BOT/UI/src/firebase.js",[],[],"/Users/nc/Desktop/BOT/UI/src/Repositories/accountRepos.js",["208","209","210","211"],[],"import { collection, addDoc, getDocs, updateDoc, deleteDoc, getDoc, doc, setDoc, query,where} from \"firebase/firestore\"\nimport database from \"../firebase\"\n\n//declared collection\nconst accountCollectionRef = collection(database, 'Accounts')\nexport const getAllAcc = async () => {\n    try {\n        const data = await getDocs(accountCollectionRef);\n        const account = data.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\n        console.log(account)\n        return account\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\nexport const retrieveAcc = async (accountID) => {\n    try {\n        const accountRef = doc(accountCollectionRef, accountID)\n        const accountDoc = await getDoc(accountRef)\n        if (accountDoc.exists()) {\n            const account = accountDoc.data()\n            const accountObj = {\n                id:account.id,\n                otp:account.otp,\n                password:account.password,\n                device_id:account.device_id\n            }\n            //console.log(account)\n            //return account\n            return { id: accountDoc.id, ...account };\n        }\n    } catch (error) {\n        throw new Error(\"Failed to retrieve account\")\n    }\n}\n\nexport const createAcc = async (accountData) => {\n    try {\n        const accountRef = doc(accountCollectionRef, accountData.id)\n        await setDoc(accountRef, accountData)\n        return true\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const updateAcc = async (accountData) => {\n    try{\n        const accountRef = doc(accountCollectionRef,accountData.id)\n        await setDoc(accountRef,accountData)\n        return true\n    }catch(error){\n    \n    }\n}\n\nexport const deleteAcc = async (accountID) => {\n    try{\n       await deleteDoc(doc(accountCollectionRef,accountID))\n       return true\n    }catch(error){\n        console.log(error)\n    }\n\n}\n\nexport const getAccountByDevice = async (deviceID) => {\n    const accountList = []\n    try {\n        //use Query to look for which account has the device_id match with deviceID\n        const account_query = query(collection(database,\"Accounts\"),where(\"device_id\",\"==\",deviceID));\n        const snapshot = await getDocs(account_query)\n   \n        if (snapshot.size> 0){\n            snapshot.forEach((doc)=>{\n               // console.log(doc.id, \" => \", doc.data()['name']);\n                accountList.push({id:doc.id,account_id:doc.data().id})\n                \n            })\n            return accountList\n            // accountList.forEach((acc)=>{\n            //     console.log(acc.account_id)\n            // })\n        }\n        else{\n            return []\n            console.log(\"No account found\")\n        }\n\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\n\n","/Users/nc/Desktop/BOT/UI/src/Pages/agencyDeviceManagement.jsx",[],[],"/Users/nc/Desktop/BOT/UI/src/Pages/agency.jsx",["212","213","214","215","216","217"],[],"import { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport Form from \"../Components/form\"\nimport Modal from \"../Components/modal\"\nimport { createAgency, getAllAgents, deleteAgency, getAgent, updateAgent } from \"../Repositories/agencyRepos\"\nimport Device from \"./device\"\nimport loading from \"../Components/loading\"\nconst Agency = () => {\n    const agencyForm = [\n        { name: \"name\", type: \"text\", label: \"Agency Name\", id: 'agency_name' },\n\n    ]\n\n    const deviceForm = [\n        { name: \"device_name\", type: \"text\", label: \"Device Name\", id: 'device_name' },\n        { name: 'device_ip', type: \"text\", label: \"Device's IP\", id: 'device_ip' }\n    ]\n    const [agents, setAgents] = useState([])\n    const [thisAgent, setThisAgent] = useState([])\n    const [renderAgent, setRenderAgent] = useState()\n    const [isLoading, setIsLoading] = useState(false)\n    const [isAlertShow,setAlertShow] = useState(false)\n    const [errors,setErrors] = useState([])\n    const [message,setMessage] = useState()\n    useEffect(() => {\n        allAgency()\n    }, [])\n    const allAgency = async () => {\n        setIsLoading(true)\n        setTimeout(() => {\n            setIsLoading(false)\n        }, 2000);\n        let data = await getAllAgents()\n        setAgents(data)\n        console.log(data)\n    }\n\n    const addAgent = async (data) => {\n        console.log(data)\n        await createAgency(data)\n        allAgency()\n\n    }\n\n    const deleteAgent = async (id) => {\n\n        let result = await deleteAgency(id)\n        if (result)\n        setMessage('Agent : '+id+' has been deleted')\n        setAlertShow(true)\n        setTimeout(()=>{\n            setAlertShow(false)\n        },3000)\n            allAgency()\n\n    }\n\n    const fetchAgent = async (agentID) => {\n\n        let this_agent = await getAgent(agentID)\n        setThisAgent(this_agent)\n\n\n    }\n\n    const editAgent = async (data) => {\n        let agentID = data.id\n        let update = await updateAgent(agentID, data)\n        if (update) { \n            setMessage(\"Agent updated\")        \n            allAgency()\n            setAlertShow(true)\n            setTimeout(() => {\n                setAlertShow(false)\n            }, 3000);\n        }\n    }\n\n    useEffect(() => {\n        let render = \"\"\n        //render = loading\n        if (isLoading) {\n            render = <tr><td colSpan=\"3\">{loading}</td></tr>\n        }\n        else {\n            render = agents.map((agent, index) => (\n                <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td>{agent.name}</td>\n                    <td>\n                        {/* <a className=\"btn btn-sm\" href={`/device-management/${agent.id}`}><i className=\"bi bi-plus\"></i>&emsp;Manage Device</a> */}\n                        {/* <button className=\"btn btn-sm\" title=\"manage Device\"  data-bs-toggle=\"modal\" data-bs-target=\"#deviceModal\"><i className=\"bi bi-sliders\"></i>&emsp;Device</button> */}\n                        <button className=\"btn btn-sm\" title=\"Edit Agent\" onClick={() => fetchAgent(agent.id)} data-bs-toggle=\"modal\" data-bs-target=\"#editAgentModal\"><i className=\"bi bi-sliders\"></i>&emsp;Edit</button>\n                        &emsp;\n                        <button title=\"Delete Agent\" className=\"btn btn-sm\" onClick={() => deleteAgent(agent.id)}><i className=\"bi bi-trash text-danger\"></i>&emsp;Delete</button>\n                    </td>\n                </tr>\n            ))\n        }\n\n        setRenderAgent(render)\n    }, [agents,isLoading])\n\n\n    return (\n        <main className=\"main\" id=\"main\">\n            <div className=\"container-md\">\n                <Modal title=\"Add Agency\" modalID=\"addAgentModal\" content={<Form formFields={agencyForm} onSubmit={addAgent} data={\"\"} />} />\n                <Modal title=\"Edit Agency\" modalID=\"editAgentModal\" content={<Form formFields={agencyForm} onSubmit={editAgent} data={thisAgent} />} />\n                <div className=\"card\">\n                    <div className=\"card-header\">Agency Management</div>\n                    <div className=\"card-body\">\n                        <br />\n                        {isAlertShow && \n                            <div className=\"alertDiv\">\n                                <div className={errors.length != 0?'alert alert-danger':'alert alert-success'}>{message}</div>\n                            </div>\n                        }\n                        <div className=\"text-end\">\n                            <button type=\"button\" className=\"btn btn-outline-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#addAgentModal\">\n                                <i className=\"bi bi-plus-circle\"></i> Agency\n                            </button>\n\n                        </div>\n                        <br /><br />\n\n                        <table className=\"table table-sm table-borderless\">\n                            <thead className=\"table-dark\">\n                                <tr>\n                                    <th>No.</th>\n                                    <th>Agent</th>\n                                    <th width=\"40%\">Action</th>\n\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {\n                                    renderAgent\n                                }\n\n\n                            </tbody>\n\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default Agency","/Users/nc/Desktop/BOT/UI/src/Components/loading.jsx",[],[],"/Users/nc/Desktop/BOT/UI/src/Repositories/agencyRepos.js",["218"],[],"import {collection, addDoc, getDocs,updateDoc,deleteDoc, getDoc,doc,setDoc} from \"firebase/firestore\"\nimport database from \"../firebase\"\n\nconst agencyCollectionRef = collection(database,'Agency')\nconst generateAgencyId = () => {\n    // Implement your logic to generate a unique agency_id\n    // You can use a library or custom logic to generate the ID\n    // For example, you can use a combination of timestamp and random number\n    const timestamp = Date.now();\n    const randomNum = Math.floor(Math.random() * 10000);\n    const agencyId = `AG${timestamp}${randomNum}`;\n    return agencyId;\n  };\nexport const getAllAgents = async () => {\n  try {\n    const querySnapshot = await getDocs(agencyCollectionRef);\n    const agents = querySnapshot.docs.map((doc) => ({\n      ...doc.data(),\n      id: doc.id,\n    }));\n    return agents;\n  } catch (error) {\n    // Handle error\n    console.error('Error getting agents:', error);\n    throw error;\n  }\n};\n\nexport const createAgency = async(data) =>{\n    const agencyId = generateAgencyId();\n    const newData = {...data,id:agencyId}\n    try{\n        // const newAgent = await database.collection('Agency').doc(data.name)\n        // return newAgent.setDoc(data)\n        \n        await setDoc(doc(agencyCollectionRef,agencyId),newData)\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const deleteAgency = async(agentID) =>{\n    try{\n        await deleteDoc(doc(agencyCollectionRef,agentID))\n        return true\n    }catch(error){}\n}\n\nexport const getAgent = async(agentID) =>{\n    try{\n        const agent = await getDoc(doc(agencyCollectionRef,agentID))\n        if(agent.exists()){\n           \n            return {id:agent.id,...agent.data()}\n        }\n    }\n    catch(error){\n    \n    }\n}\n\nexport const updateAgent = async(id,data)=>{\n\n    try{\n        const agent = doc(database,\"Agency\",id)\n        await updateDoc(agent,data)\n        return true\n    }catch(error){\n    \n    }\n}\n\nexport const getPassword = async(agentID)=>{\n    try{\n        const agencyRef = doc(agencyCollectionRef,agentID)\n        const agent = await getDoc(agencyRef)\n        if(agent.exists()){\n            return agent.data().password\n        }\n    }\n    catch(error){\n    \n    }\n}\n","/Users/nc/Desktop/BOT/UI/src/Repositories/deviceRepos.js",["219","220","221","222"],[],"import { collection, addDoc, getDocs, updateDoc, deleteDoc, getDoc, doc, setDoc } from \"firebase/firestore\"\nimport database from \"../firebase\"\nimport { useState } from \"react\";\n\nfunction generateID() {\n    const currentTime = Date.now().toString();\n    return 'PC' + currentTime;\n}\n\n\nconst agencyRef = (agencyID) => {\n    return doc(database, 'Agency', agencyID)\n\n}\n\nexport const createDevice = async (agencyID, deviceData) => {\n    try {\n        const agencyRef = doc(database, 'Agency', agencyID)\n        const deviceCollectionRef = collection(agencyRef, 'devices')\n        const deviceID = generateID()\n        const newData = { ...deviceData, device_id: deviceID }\n        await setDoc(doc(deviceCollectionRef, deviceID), newData)\n        return true\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\nexport const retrieveDevice = async (agencyID, deviceID) => {\n    try {\n        const deviceRef = doc(collection(database, 'Agency', agencyID, 'devices'), deviceID)\n        const deviceDoc = await getDoc(deviceRef)\n\n        if (deviceDoc.exists()) {\n            const deviceData = deviceDoc.data();\n            return { id: deviceDoc.id, ...deviceData }\n        }\n        else {\n            throw new Error(\"Device not found\")\n        }\n\n        // const deviceRef = doc(database, 'agency', agencyID, 'devices', deviceID);\n        // const deviceSnapshot = await getDoc(deviceRef);\n\n        // if (deviceSnapshot.exists()) {\n        //     const deviceData = deviceSnapshot.data();\n        //     return {id:deviceData.device_id,...deviceData};\n        // } else {\n        //     throw new Error('Device not found');\n        // }\n\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const getDevices = async (agencyID) => {\n    try {\n\n        const agencyRef = doc(database, 'Agency', agencyID)\n        const deviceCollectionRef = collection(agencyRef, 'devices')\n        const devices = await getDocs(deviceCollectionRef)\n        const deviceArray = []\n        devices.forEach((d) => {\n            \n            deviceArray.push({\n               id:d.id,\n                ...d.data(),\n            });\n        })\n        return deviceArray;\n\n\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const updateDevice = async(deviceData) =>{\n    try{\n        const deviceRef = doc(database,'Agency',deviceData.agencyID,'devices',deviceData.device_id)\n        await setDoc(deviceRef,deviceData)\n        return true\n      \n        \n    }\n    catch(error){\n        console.log(error)\n    }\n\n}\n\nexport const deleteDevice = async(agentID,deviceID) =>{\n    try{\n        await deleteDoc(doc(database,'Agency',agentID,'devices',deviceID))\n        return true\n    }catch(error){\n        console.log(error)\n    }\n\n}\n","/Users/nc/Desktop/BOT/UI/src/Pages/selectAccount.jsx",["223","224","225","226","227","228"],[],"import {useState,useEffect} from \"react\"\nimport { getAccountByDevice } from \"../Repositories/accountRepos\"\n\nconst AccountList = ({device,selectedAccountChangeHandling}) =>{\n    const [accounts,setAccounts] = useState([])\n    const [errors,setErrors] = useState([])\n    const [message,setMessage] = useState([])\n    const [selectedAccounts,setSelectedAccounts] = useState([])\n    const [renderAccounts,setRenderAccounts] = useState()\n\n    const filterAccount = async()=>{\n        try{\n            const getAccounts = await getAccountByDevice(device)\n            if(getAccounts){\n                setAccounts(getAccounts)\n            }\n            //setAccounts(getAccount)\n        }catch(error){}\n\n    }\n\n    // updateState by effect when device changed\n    useEffect(()=>{\n        filterAccount()\n        setSelectedAccounts([])\n    },[device])\n\n    const handleAccountSelect = (accountID) =>(event)=>{\n        const isChecked = event.target.checked\n       \n        if(isChecked){\n        \n             const updateSelectedAcc = [...selectedAccounts,{account_id:accountID}];\n             setSelectedAccounts(updateSelectedAcc)\n        }else{\n        \n            const updateSelectedAcc = selectedAccounts.filter(\n                (account)=>account.account_id !== accountID\n            );\n            setSelectedAccounts(updateSelectedAcc)\n            \n        }\n        \n        \n    };\n\n    useEffect(()=>{\n        selectedAccountChangeHandling(selectedAccounts)\n      \n    },[selectedAccounts])\n\n    //render\n\n    return (\n        <div className=\"account-list\">\n            {\n            errors.length !== 0 &&\n            <div className=\"alert-div\">\n\n                <div className=\"alert alert-danger\">{message}</div>\n            </div>\n            }\n\n            <div className=\"row\">\n\n                <div className=\"col-12\">\n\n                    <div className=\"table table-hovered\">\n                        <thead>\n                            <tr>\n                                <th>\n                                    Select Account(s)\n                                </th>\n                               \n                                <th>Account ID</th>\n                            </tr>\n\n\n                        </thead>\n\n                        <tbody>\n                            {\n                                accounts.map((account,index)=>(\n                                    <tr key={index}>\n                                       <td>\n                                            <input className=\"form-check-input acc-checkbox\" type=\"checkbox\" onChange={handleAccountSelect(account.account_id)} />\n                                        </td>\n                                       \n                                        <td>\n                                            {account.account_id}\n                                        </td>\n\n                                    </tr>    \n                                ))\n                            }\n                        </tbody>\n                    </div>\n                </div>\n            </div>\n        </div>    \n        \n    )\n\n}\n\nexport default AccountList","/Users/nc/Desktop/BOT/UI/src/Pages/login.jsx",["229","230"],[],"import { useState, useEffect } from \"react\";\nimport { getAllAgents, getPassword } from \"../Repositories/agencyRepos\";\nimport Cookies from \"js-cookie\";\nimport Alert from \"../Components/alert\";\nconst Login = () => {\n    const [showAlert,setShowAlert] = useState(false)\n\n    const [agents, setAgents] = useState([])\n\n    const [selectedAgent, setSelectedAgent] = useState('')\n\n    const [errors, setErrors] = useState(false)\n\n    const [message, setMessage] = useState('')\n\n    const [name, setName] = useState('')\n\n    const [auth, setAuth] = useState(false)\n\n    const [agencypass, setAgencyPass] = useState()\n    const [password, setPassword] = useState()\n\n    const fetchAgents = async () => {\n        try {\n            let data = await getAllAgents()\n            if (data) {\n                setAgents(data)\n            }\n        } catch (error) {\n            setErrors(true)\n            console.log(error)\n        }\n    }\n\n    useEffect(() => {\n        fetchAgents()\n    }, [])\n\n    const handleAgentChange = async (e) => {\n        let value = e.target.value\n\n\n        if (value) {\n            let thisID = document.getElementById(value).innerText\n            let this_password = await getPassword(value)\n            if (this_password) {\n\n                setSelectedAgent(value)\n                setName(thisID)\n                setAgencyPass(this_password)\n            }\n        }\n        else {\n            setSelectedAgent('')\n            setName('')\n            setPassword('')\n        }\n\n    }\n\n    const handlePasswordChange = (e) => {\n        let pass = e.target.value\n        setPassword(pass)\n    }\n\n    const authenticate = (e) => {\n        e.preventDefault()\n        setMessage()\n        setErrors(false)\n        setTimeout(() => {\n\n\n            if (selectedAgent && name && password) {\n                if (password === agencypass) {\n                    Cookies.set('agentID', selectedAgent)\n                    Cookies.set('agentName', name)\n                    setAuth(true)\n                    setMessage(\"You are logged in\")\n                    setTimeout(() => {\n                        window.location.href = \"/bot\"\n                    }, 2500);\n                }\n                else {\n                    setMessage(\"Invalid Password\")\n                    setErrors(true)\n                }\n\n\n            }\n\n            if (!password) {\n                setMessage(\"Please enter password\")\n                setErrors(true)\n            }\n            if (!selectedAgent) {\n                setMessage(\"Please Select Agent\")\n                setErrors(true)\n            }\n        }, 1500);\n\n\n    }\n\n    return (\n        <div>\n            <br /><br /><br /><br />\n            <div className=\"container-md\">\n                <div className=\"card\">\n                    <div className=\"card-header\">Login</div>\n                    <div className=\"card-body\">\n                        <br />\n                        {\n                            // errors && <div className=\"alert alert-danger\">{message}</div>\n                            errors && <Alert status=\"fail\" message={message} display=\"true\"/>\n                        }\n\n                        {\n                            auth && <div className=\"alert alert-success\">{message}</div>\n                        }\n                        <br />\n                        <form onSubmit={authenticate}>\n                            <div className=\"row\">\n                                <div className=\"col-2\"></div>\n                                <div className=\"col-8\">\n                                    <div className=\"row\">\n                                        <div className=\"col-4\">\n                                            <label htmlFor=\"#agent\" className=\"form-label\">Select Agency</label>\n                                        </div>\n                                        <div className=\"col-8\">\n                                            <select name=\"agent\" id=\"agent\" className=\"form-select\" onChange={handleAgentChange}>\n                                                <option value=\"\">Please Select</option>\n                                                {\n                                                    agents.length > 0\n                                                    &&\n                                                    agents.map((agent, index) => (\n                                                        <option value={agent.id} key={index} id={agent.id}>{agent.name}</option>\n                                                    ))\n                                                }\n                                            </select>\n                                        </div>\n\n\n                                    </div>\n\n                                    <br />\n\n                                    <div className=\"row\">\n                                        <div className=\"col-4\">\n                                            <label htmlFor=\"#password\" className=\"form-label\">Password</label>\n                                        </div>\n                                        <div className=\"col-8\">\n                                            <input type=\"password\" name=\"password\" id=\"pass\" className=\"form-control\" onChange={handlePasswordChange} disabled={selectedAgent ? '' : 'true'} value={password} />\n                                        </div>\n                                    </div>\n                                    <br />\n                                    <div className=\"row\">\n                                        <div className=\"text-center\">\n                                            <button className=\"btn btn-primary\" type=\"submit\">Login</button>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"col-2\"></div>\n\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login;","/Users/nc/Desktop/BOT/UI/src/Pages/logout.jsx",[],[],"/Users/nc/Desktop/BOT/UI/src/Components/alert.jsx",["231"],[],"import { useState,useEffect } from \"react\";\n\nconst Alert = ({status,message,display}) =>{\n    const [isShow,setIsShow] = useState(false)\n\n    useEffect(()=>{\n        setIsShow(true)\n        setTimeout(() => {\n            setIsShow(false)\n        }, 2000);\n        display = false\n    },[display])\n\n    return(\n        <div>\n            {\n                isShow ?\n                status === 'success'? <div className=\"alert alert-success\">{message}</div>\n                : <div className=\"alert alert-danger\">{message}</div>\n                :''\n            }\n        </div>    \n    )\n}\n\nexport default Alert","/Users/nc/Desktop/BOT/UI/src/Pages/Actions/ImageComment.jsx",["232"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nconst ImageComment = ({ data }) => {\n\n    const [image, setImage] = useState()\n    const [errors, setErrors] = useState([])\n\n\n    const validation = () => {\n\n        let newError = []\n        setErrors([])\n        if (data.accounts.length <= 0) {\n            newError.push('Please select at least one account')\n        }\n        if (data.posts.length <= 0) {\n            newError.push(\"Please enter the post link(s) to comment\")\n        }\n        if (!image) {\n            newError.push(\"Please choose image to comment\")\n        }\n\n        if (newError.length > 0) {\n            setErrors(newError)\n            return false\n        }\n        else {\n            return true\n        }\n    }\n\n\n\n    const handleImageChange = (e) => {\n        setImage(e.target.files[0])\n    }\n\n    const pushImageComment = async () => {\n        let validate = validation()\n        if (validate) {\n            const formData = new FormData();\n            formData.append('accounts', JSON.stringify(data.accounts));\n            formData.append('posts', JSON.stringify(data.posts));\n            formData.append('image', image);\n\n            try {\n                const response = await axios.post(\"http://192.168.0.133:5000/comment-with-image\", formData, {\n                    headers: {\n                        'Content-Type': 'multipart/form-data', // Set the correct Content-Type for file uploads\n                    },\n                });\n\n                if (response.data.status === 200) {\n                    console.log(\"DONE\");\n                }\n\n                if (response.data.error) {\n                    console.log(response.data.error);\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    }\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-8\">\n\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <label htmlFor=\"#image\" className=\"form-label\">Choose Image</label>\n                        </div>\n                        <div className=\"col-8\">\n                            <input type=\"file\" name=\"image\" id=\"image\" className=\"form-control\" onChange={handleImageChange} />\n                        </div>\n                    </div>\n\n\n\n                </div>\n            </div>\n            <br />\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <label className=\"form-label\" htmlFor=\"#selectedImage\">Preview</label>\n                        </div>\n\n                        <div className=\"col-10\">\n                            <div\n                                className=\"border border-2 border-secondary d-flex align-items-center justify-content-center\"\n                                style={{ height: '450px', width: '450px' }}\n                            >\n                                {image && (\n                                    <img src={URL.createObjectURL(image)} id=\"selectedImage\" alt=\"Preview\" style={{ maxWidth: '100%', maxHeight: '100%' }} />\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <br />\n            <div className=\"text-start\">\n                {\n                    errors.length > 0 &&\n                    <div className=\"alert alert-danger\">\n                        <ul>\n                            {\n                                errors.map((error, index) => (\n                                    <li className=\"text-danger\" key={index}>{error}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                }\n            </div>\n            <div className=\"text-center\">\n                <button className=\"btn btn-dark\" onClick={pushImageComment}>Run BOT</button>\n            </div>\n            <br />\n\n        </div>\n    )\n\n}\nexport default ImageComment","/Users/nc/Desktop/BOT/UI/src/Pages/Actions/likePost.jsx",[],[],"/Users/nc/Desktop/BOT/UI/src/Pages/Actions/comment.jsx",["233"],[],"import { useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nconst Comment = ({ data }) => {\n    const [comment,setComment] = useState()\n    const [info,setInfo] = useState({\n        accounts:data.accounts,\n        posts:data.posts\n    })\n    \n    const sendComment = async()=>{\n        try{\n            await axios.post(\"http://192.168.0.133:5000/comment-message\",info).then(res=>{\n                if(res.data.status === 200){\n                    alert(\"OK\")\n                }\n            })\n        }catch(error){}\n    }\n\n    const handleCommentChange = (e) =>{\n        let msg = e.target.value\n        setComment(msg)\n    }\n\n    useEffect(()=>{\n        const newInfo = {\n            accounts:data.accounts,\n            posts:data.posts,\n            comment:comment\n        }\n        setInfo(newInfo)\n        console.log(info)\n    },[comment,data.accounts,data.posts])\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-8\">\n\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <label htmlFor=\"#tag\" className=\"form-label\">Reply To@</label>\n                        </div>\n                        <div className=\"col-8\">\n                            <input type=\"text\" name=\"reply\" id=\"reply\" className=\"form-control\" />\n                        </div>\n                    </div>\n                    <br />\n\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <label htmlFor=\"#comment\" className=\"form-label\">Comment:</label>\n                        </div>\n                        <div className=\"col-8\">\n                            <textarea name=\"message\" id=\"message\" cols=\"10\" rows=\"10\" className=\"form-control\" onChange={handleCommentChange}/>\n                        </div>\n                    </div>\n                    <br />\n\n\n                </div>\n                <div className=\"text-center\">\n                    <button className=\"btn btn-dark\" onClick={sendComment}>Comment</button>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Comment",{"ruleId":"234","severity":1,"message":"235","line":11,"column":8,"nodeType":"236","messageId":"237","endLine":11,"endColumn":18},{"ruleId":"238","severity":1,"message":"239","line":50,"column":5,"nodeType":"240","endLine":50,"endColumn":18,"suggestions":"241"},{"ruleId":"234","severity":1,"message":"242","line":5,"column":12,"nodeType":"236","messageId":"237","endLine":5,"endColumn":20},{"ruleId":"234","severity":1,"message":"243","line":5,"column":22,"nodeType":"236","messageId":"237","endLine":5,"endColumn":33},{"ruleId":"234","severity":1,"message":"244","line":6,"column":12,"nodeType":"236","messageId":"237","endLine":6,"endColumn":20},{"ruleId":"234","severity":1,"message":"245","line":6,"column":22,"nodeType":"236","messageId":"237","endLine":6,"endColumn":31},{"ruleId":"238","severity":1,"message":"246","line":38,"column":8,"nodeType":"240","endLine":38,"endColumn":10,"suggestions":"247"},{"ruleId":"234","severity":1,"message":"248","line":2,"column":20,"nodeType":"236","messageId":"237","endLine":2,"endColumn":29},{"ruleId":"234","severity":1,"message":"249","line":6,"column":12,"nodeType":"236","messageId":"237","endLine":6,"endColumn":17},{"ruleId":"234","severity":1,"message":"250","line":6,"column":19,"nodeType":"236","messageId":"237","endLine":6,"endColumn":27},{"ruleId":"234","severity":1,"message":"251","line":3,"column":10,"nodeType":"236","messageId":"237","endLine":3,"endColumn":14},{"ruleId":"234","severity":1,"message":"252","line":9,"column":12,"nodeType":"236","messageId":"237","endLine":9,"endColumn":17},{"ruleId":"234","severity":1,"message":"253","line":9,"column":19,"nodeType":"236","messageId":"237","endLine":9,"endColumn":27},{"ruleId":"234","severity":1,"message":"254","line":57,"column":14,"nodeType":"236","messageId":"237","endLine":57,"endColumn":24},{"ruleId":"234","severity":1,"message":"255","line":11,"column":12,"nodeType":"236","messageId":"237","endLine":11,"endColumn":18},{"ruleId":"234","severity":1,"message":"256","line":11,"column":20,"nodeType":"236","messageId":"237","endLine":11,"endColumn":29},{"ruleId":"234","severity":1,"message":"257","line":22,"column":12,"nodeType":"236","messageId":"237","endLine":22,"endColumn":25},{"ruleId":"234","severity":1,"message":"258","line":22,"column":26,"nodeType":"236","messageId":"237","endLine":22,"endColumn":42},{"ruleId":"238","severity":1,"message":"259","line":52,"column":8,"nodeType":"240","endLine":52,"endColumn":10,"suggestions":"260"},{"ruleId":"238","severity":1,"message":"261","line":75,"column":8,"nodeType":"240","endLine":75,"endColumn":24,"suggestions":"262"},{"ruleId":"263","severity":1,"message":"264","line":24,"column":29,"nodeType":"265","endLine":24,"endColumn":86},{"ruleId":"263","severity":1,"message":"264","line":31,"column":29,"nodeType":"265","endLine":31,"endColumn":93},{"ruleId":"263","severity":1,"message":"264","line":39,"column":37,"nodeType":"265","endLine":39,"endColumn":49},{"ruleId":"263","severity":1,"message":"264","line":97,"column":37,"nodeType":"265","endLine":97,"endColumn":49},{"ruleId":"263","severity":1,"message":"264","line":106,"column":29,"nodeType":"265","endLine":106,"endColumn":93},{"ruleId":"263","severity":1,"message":"264","line":114,"column":37,"nodeType":"265","endLine":114,"endColumn":49},{"ruleId":"263","severity":1,"message":"264","line":121,"column":37,"nodeType":"265","endLine":121,"endColumn":49},{"ruleId":"263","severity":1,"message":"264","line":135,"column":37,"nodeType":"265","endLine":135,"endColumn":49},{"ruleId":"263","severity":1,"message":"264","line":149,"column":37,"nodeType":"265","endLine":149,"endColumn":49},{"ruleId":"263","severity":1,"message":"264","line":163,"column":37,"nodeType":"265","endLine":163,"endColumn":49},{"ruleId":"263","severity":1,"message":"264","line":172,"column":29,"nodeType":"265","endLine":172,"endColumn":127},{"ruleId":"263","severity":1,"message":"264","line":216,"column":37,"nodeType":"265","endLine":216,"endColumn":97},{"ruleId":"234","severity":1,"message":"266","line":14,"column":27,"nodeType":"236","messageId":"237","endLine":14,"endColumn":43},{"ruleId":"238","severity":1,"message":"259","line":37,"column":8,"nodeType":"240","endLine":37,"endColumn":10,"suggestions":"267"},{"ruleId":"238","severity":1,"message":"268","line":72,"column":8,"nodeType":"240","endLine":72,"endColumn":24,"suggestions":"269"},{"ruleId":"238","severity":1,"message":"270","line":117,"column":7,"nodeType":"240","endLine":117,"endColumn":13,"suggestions":"271"},{"ruleId":"234","severity":1,"message":"272","line":4,"column":8,"nodeType":"236","messageId":"237","endLine":4,"endColumn":13},{"ruleId":"234","severity":1,"message":"273","line":6,"column":10,"nodeType":"236","messageId":"237","endLine":6,"endColumn":22},{"ruleId":"234","severity":1,"message":"256","line":14,"column":20,"nodeType":"236","messageId":"237","endLine":14,"endColumn":29},{"ruleId":"234","severity":1,"message":"274","line":22,"column":12,"nodeType":"236","messageId":"237","endLine":22,"endColumn":25},{"ruleId":"234","severity":1,"message":"266","line":22,"column":27,"nodeType":"236","messageId":"237","endLine":22,"endColumn":43},{"ruleId":"234","severity":1,"message":"275","line":25,"column":12,"nodeType":"236","messageId":"237","endLine":25,"endColumn":24},{"ruleId":"234","severity":1,"message":"276","line":25,"column":26,"nodeType":"236","messageId":"237","endLine":25,"endColumn":41},{"ruleId":"238","severity":1,"message":"277","line":30,"column":8,"nodeType":"240","endLine":30,"endColumn":10,"suggestions":"278"},{"ruleId":"234","severity":1,"message":"272","line":2,"column":8,"nodeType":"236","messageId":"237","endLine":2,"endColumn":13},{"ruleId":"234","severity":1,"message":"256","line":6,"column":20,"nodeType":"236","messageId":"237","endLine":6,"endColumn":29},{"ruleId":"234","severity":1,"message":"279","line":7,"column":21,"nodeType":"236","messageId":"237","endLine":7,"endColumn":31},{"ruleId":"234","severity":1,"message":"280","line":9,"column":12,"nodeType":"236","messageId":"237","endLine":9,"endColumn":25},{"ruleId":"234","severity":1,"message":"281","line":9,"column":27,"nodeType":"236","messageId":"237","endLine":9,"endColumn":43},{"ruleId":"238","severity":1,"message":"259","line":43,"column":8,"nodeType":"240","endLine":43,"endColumn":15,"suggestions":"282"},{"ruleId":"238","severity":1,"message":"283","line":97,"column":8,"nodeType":"240","endLine":97,"endColumn":25,"suggestions":"284"},{"ruleId":"285","severity":1,"message":"286","line":104,"column":24,"nodeType":"287","messageId":"288","endLine":104,"endColumn":26},{"ruleId":"234","severity":1,"message":"289","line":1,"column":22,"nodeType":"236","messageId":"237","endLine":1,"endColumn":28},{"ruleId":"234","severity":1,"message":"290","line":1,"column":39,"nodeType":"236","messageId":"237","endLine":1,"endColumn":48},{"ruleId":"234","severity":1,"message":"291","line":24,"column":19,"nodeType":"236","messageId":"237","endLine":24,"endColumn":29},{"ruleId":"292","severity":1,"message":"293","line":89,"column":13,"nodeType":"294","messageId":"295","endLine":89,"endColumn":44},{"ruleId":"234","severity":1,"message":"251","line":2,"column":10,"nodeType":"236","messageId":"237","endLine":2,"endColumn":14},{"ruleId":"234","severity":1,"message":"296","line":6,"column":8,"nodeType":"236","messageId":"237","endLine":6,"endColumn":14},{"ruleId":"234","severity":1,"message":"297","line":14,"column":11,"nodeType":"236","messageId":"237","endLine":14,"endColumn":21},{"ruleId":"234","severity":1,"message":"256","line":23,"column":19,"nodeType":"236","messageId":"237","endLine":23,"endColumn":28},{"ruleId":"238","severity":1,"message":"298","line":102,"column":8,"nodeType":"240","endLine":102,"endColumn":26,"suggestions":"299"},{"ruleId":"285","severity":1,"message":"286","line":116,"column":63,"nodeType":"287","messageId":"288","endLine":116,"endColumn":65},{"ruleId":"234","severity":1,"message":"289","line":1,"column":21,"nodeType":"236","messageId":"237","endLine":1,"endColumn":27},{"ruleId":"234","severity":1,"message":"289","line":1,"column":22,"nodeType":"236","messageId":"237","endLine":1,"endColumn":28},{"ruleId":"234","severity":1,"message":"290","line":1,"column":39,"nodeType":"236","messageId":"237","endLine":1,"endColumn":48},{"ruleId":"234","severity":1,"message":"300","line":3,"column":10,"nodeType":"236","messageId":"237","endLine":3,"endColumn":18},{"ruleId":"234","severity":1,"message":"301","line":11,"column":7,"nodeType":"236","messageId":"237","endLine":11,"endColumn":16},{"ruleId":"234","severity":1,"message":"256","line":6,"column":19,"nodeType":"236","messageId":"237","endLine":6,"endColumn":28},{"ruleId":"234","severity":1,"message":"279","line":7,"column":20,"nodeType":"236","messageId":"237","endLine":7,"endColumn":30},{"ruleId":"234","severity":1,"message":"302","line":9,"column":12,"nodeType":"236","messageId":"237","endLine":9,"endColumn":26},{"ruleId":"234","severity":1,"message":"303","line":9,"column":27,"nodeType":"236","messageId":"237","endLine":9,"endColumn":44},{"ruleId":"238","severity":1,"message":"304","line":26,"column":7,"nodeType":"240","endLine":26,"endColumn":15,"suggestions":"305"},{"ruleId":"238","severity":1,"message":"306","line":50,"column":7,"nodeType":"240","endLine":50,"endColumn":25,"suggestions":"307"},{"ruleId":"234","severity":1,"message":"308","line":6,"column":12,"nodeType":"236","messageId":"237","endLine":6,"endColumn":21},{"ruleId":"234","severity":1,"message":"309","line":6,"column":22,"nodeType":"236","messageId":"237","endLine":6,"endColumn":34},{"ruleId":"238","severity":1,"message":"310","line":11,"column":19,"nodeType":"311","endLine":11,"endColumn":24},{"ruleId":"234","severity":1,"message":"248","line":1,"column":20,"nodeType":"236","messageId":"237","endLine":1,"endColumn":29},{"ruleId":"238","severity":1,"message":"312","line":34,"column":7,"nodeType":"240","endLine":34,"endColumn":41,"suggestions":"313"},"no-unused-vars","'Management' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'validateAgentID'. Either include it or remove the dependency array.","ArrayExpression",["314"],"'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'isSelect' is assigned a value but never used.","'setSelect' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'i', 'list', and 'row'. Either include them or remove the dependency array.",["315"],"'useEffect' is defined but never used.","'cases' is assigned a value but never used.","'setCases' is assigned a value but never used.","'Link' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'closeModal' is defined but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'accountDetail' is assigned a value but never used.","'setAccountDetail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchDevices'. Either include it or remove the dependency array.",["316"],"React Hook useEffect has a missing dependency: 'fetchAccountList'. Either include it or remove the dependency array.",["317"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setSelectedAgent' is assigned a value but never used.",["318"],"React Hook useEffect has a missing dependency: 'getAccounts'. Either include it or remove the dependency array.",["319"],"React Hook useEffect has a missing dependency: 'wrappedPostLink'. Either include it or remove the dependency array.",["320"],"'axios' is defined but never used.","'getAllAgents' is defined but never used.","'selectedAgent' is assigned a value but never used.","'renderDevice' is assigned a value but never used.","'setRenderDevice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllDevices'. Either include it or remove the dependency array.",["321"],"'setMessage' is assigned a value but never used.","'renderDevices' is assigned a value but never used.","'setRenderDevices' is assigned a value but never used.",["322"],"React Hook useEffect has a missing dependency: 'onSelectedDevicesChange'. Either include it or remove the dependency array. If 'onSelectedDevicesChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["323"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'addDoc' is defined but never used.","'updateDoc' is defined but never used.","'accountObj' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'Device' is defined but never used.","'deviceForm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'deleteAgent'. Either include it or remove the dependency array.",["324"],"'useState' is defined but never used.","'agencyRef' is assigned a value but never used.","'renderAccounts' is assigned a value but never used.","'setRenderAccounts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'filterAccount'. Either include it or remove the dependency array.",["325"],"React Hook useEffect has a missing dependency: 'selectedAccountChangeHandling'. Either include it or remove the dependency array. If 'selectedAccountChangeHandling' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["326"],"'showAlert' is assigned a value but never used.","'setShowAlert' is assigned a value but never used.","Assignments to the 'display' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has a missing dependency: 'info'. Either include it or remove the dependency array.",["327"],{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"332","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},"Update the dependencies array to be: [currentPath, validateAgentID]",{"range":"355","text":"356"},"Update the dependencies array to be: [i, list, row]",{"range":"357","text":"358"},"Update the dependencies array to be: [fetchDevices]",{"range":"359","text":"360"},"Update the dependencies array to be: [fetchAccountList, selectedDevice]",{"range":"361","text":"362"},{"range":"363","text":"360"},"Update the dependencies array to be: [getAccounts, selectedDevice]",{"range":"364","text":"365"},"Update the dependencies array to be: [text, wrappedPostLink]",{"range":"366","text":"367"},"Update the dependencies array to be: [getAllDevices]",{"range":"368","text":"369"},"Update the dependencies array to be: [agent, fetchDevices]",{"range":"370","text":"371"},"Update the dependencies array to be: [onSelectedDevicesChange, selectedDevices]",{"range":"372","text":"373"},"Update the dependencies array to be: [agents, deleteAgent, isLoading]",{"range":"374","text":"375"},"Update the dependencies array to be: [device, filterAccount]",{"range":"376","text":"377"},"Update the dependencies array to be: [selectedAccountChangeHandling, selectedAccounts]",{"range":"378","text":"379"},"Update the dependencies array to be: [comment, data.accounts, data.posts, info]",{"range":"380","text":"381"},[1446,1459],"[currentPath, validateAgentID]",[1446,1448],"[i, list, row]",[1666,1668],"[fetchDevices]",[2168,2184],"[fetchAccountList, selectedDevice]",[1404,1406],[2238,2254],"[getAccounts, selectedDevice]",[3479,3485],"[text, wrappedPostLink]",[1088,1090],"[getAllDevices]",[1525,1532],"[agent, fetchDevices]",[3507,3524],"[onSelectedDevicesChange, selectedDevices]",[3495,3513],"[agents, deleteAgent, isLoading]",[834,842],"[device, filterAccount]",[1477,1495],"[selectedAccountChangeHandling, selectedAccounts]",[845,879],"[comment, data.accounts, data.posts, info]"]