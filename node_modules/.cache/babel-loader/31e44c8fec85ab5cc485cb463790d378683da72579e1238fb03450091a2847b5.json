{"ast":null,"code":"var _jsxFileName = \"/Users/nc/Desktop/BOT/UI/src/Pages/selectAccount.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { getAccountByDevice } from \"../Repositories/accountRepos\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountList = _ref => {\n  _s();\n  let {\n    device,\n    selectedAccountChangeHandling\n  } = _ref;\n  const [accounts, setAccounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [message, setMessage] = useState([]);\n  const [selectedAccounts, setSelectedAccounts] = useState([]);\n  const [renderAccounts, setRenderAccounts] = useState();\n  const filterAccount = async () => {\n    try {\n      const getAccounts = await getAccountByDevice(device);\n      if (getAccounts) {\n        setAccounts(getAccounts);\n      }\n      //setAccounts(getAccount)\n    } catch (error) {}\n  };\n\n  // updateState by effect when device changed\n  useEffect(() => {\n    filterAccount();\n    setSelectedAccounts([]);\n  }, [device]);\n  const handleAccountSelect = accountID => event => {\n    const isChecked = event.target.check;\n    let updateSelectedAcc = [];\n    if (isChecked) {\n      updateSelectedAcc = [...selectedAccounts, {\n        account_id: accountID\n      }];\n    } else {\n      updateSelectedAcc = selectedAccounts.filter(account => account.account_id !== accountID);\n    }\n    setSelectedAccounts(updateSelectedAcc);\n  };\n  useEffect(() => {\n    selectedAccountChangeHandling(selectedAccounts);\n  }, [selectedAccounts]);\n\n  //render\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"account-list\",\n    children: [errors.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table table-hovered\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Select Account(s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Account ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: accounts.map((account, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"form-check-input acc-checkbox\",\n                  type: \"checkbox\",\n                  onChange: () => handleAccountSelect(account.account_id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 40\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: device.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(AccountList, \"PjERLL3Cc8DTyeCkD7xF1DdR39c=\");\n_c = AccountList;\nexport default AccountList;\nvar _c;\n$RefreshReg$(_c, \"AccountList\");","map":{"version":3,"names":["useState","useEffect","getAccountByDevice","jsxDEV","_jsxDEV","AccountList","_ref","_s","device","selectedAccountChangeHandling","accounts","setAccounts","errors","setErrors","message","setMessage","selectedAccounts","setSelectedAccounts","renderAccounts","setRenderAccounts","filterAccount","getAccounts","error","handleAccountSelect","accountID","event","isChecked","target","check","updateSelectedAcc","account_id","filter","account","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","onChange","id","_c","$RefreshReg$"],"sources":["/Users/nc/Desktop/BOT/UI/src/Pages/selectAccount.jsx"],"sourcesContent":["import {useState,useEffect} from \"react\"\nimport { getAccountByDevice } from \"../Repositories/accountRepos\"\n\nconst AccountList = ({device,selectedAccountChangeHandling}) =>{\n    const [accounts,setAccounts] = useState([])\n    const [errors,setErrors] = useState([])\n    const [message,setMessage] = useState([])\n    const [selectedAccounts,setSelectedAccounts] = useState([])\n    const [renderAccounts,setRenderAccounts] = useState()\n\n    const filterAccount = async()=>{\n        try{\n            const getAccounts = await getAccountByDevice(device)\n            if(getAccounts){\n                setAccounts(getAccounts)\n            }\n            //setAccounts(getAccount)\n        }catch(error){}\n\n    }\n\n    // updateState by effect when device changed\n    useEffect(()=>{\n        filterAccount()\n        setSelectedAccounts([])\n    },[device])\n\n    const handleAccountSelect = (accountID) =>(event)=>{\n        const isChecked = event.target.check\n        let updateSelectedAcc = []\n        if(isChecked){\n        \n             updateSelectedAcc = [...selectedAccounts,{account_id:accountID}];\n            \n        }else{\n        \n            updateSelectedAcc = selectedAccounts.filter(\n                (account)=>account.account_id !== accountID\n            );\n            \n        }\n        setSelectedAccounts(updateSelectedAcc)\n    };\n\n    useEffect(()=>{\n        selectedAccountChangeHandling(selectedAccounts)\n    },[selectedAccounts])\n\n    //render\n\n    return (\n        <div className=\"account-list\">\n            {\n            errors.length !== 0 &&\n            <div className=\"alert-div\">\n\n                <div className=\"alert alert-danger\">{message}</div>\n            </div>\n            }\n\n            <div className=\"row\">\n\n                <div className=\"col-12\">\n\n                    <div className=\"table table-hovered\">\n                        <thead>\n                            <tr>\n                                <th>\n                                    Select Account(s)\n                                </th>\n                               \n                                <th>Account ID</th>\n                            </tr>\n\n\n                        </thead>\n\n                        <tbody>\n                            {\n                                accounts.map((account,index)=>(\n                                    <tr key={index}>\n                                       <td>\n                                            <input className=\"form-check-input acc-checkbox\" type=\"checkbox\" onChange={()=>handleAccountSelect(account.account_id)} />\n                                        </td>\n                                       \n                                        <td>\n                                            {device.id}\n                                        </td>\n\n                                    </tr>    \n                                ))\n                            }\n                        </tbody>\n                    </div>\n                </div>\n            </div>\n        </div>    \n        \n    )\n\n}\n\nexport default AccountList"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}