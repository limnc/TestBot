{"ast":null,"code":"var _jsxFileName = \"/Users/nc/Desktop/BOT/UI/src/Pages/selectDevice.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeviceList = _ref => {\n  _s();\n  let {\n    selected\n  } = _ref;\n  const [devices, setDevices] = useState([]);\n  const fetchDevices = async () => {\n    try {\n      await axios.get('http://127.0.0.1:5000/getAllDevices').then(response => {\n        if (response.data.status === 200) {\n          const device = response.data.devices;\n          const devicesArray = Object.keys(device).map(key => ({\n            name: key,\n            ...device[key]\n          }));\n          setDevices(devicesArray);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    fetchDevices();\n  }, []);\n  const [selectedDevices, setSelectedDevices] = useState([]);\n  const handleSelect = (deviceName, deviceIP) => event => {\n    const isChecked = event.target.checked;\n    setSelectedDevices(prevSelectedDevices => {\n      if (isChecked) {\n        // Add the selected device to the selectedDevice state\n        return [...prevSelectedDevices, {\n          device_name: deviceName,\n          device_ip: deviceIP\n        }];\n      } else {\n        // Remove the unchecked device from the selectedDevice state\n        return prevSelectedDevices.filter(device => device !== deviceName);\n      }\n    });\n  };\n  useEffect(() => {\n    selected(selectedDevices);\n  }, [selectedDevices]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"device-list\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hovered\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: devices.map((device, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"form-check-input device-checkbox\",\n                  type: \"checkbox\",\n                  onChange: handleSelect(device.device_name, device.device_ip)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: device.device_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(DeviceList, \"1QSagxZ3xy58H5HvfcIf4S7UFPY=\");\n_c = DeviceList;\nexport default DeviceList;\nvar _c;\n$RefreshReg$(_c, \"DeviceList\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","DeviceList","_ref","_s","selected","devices","setDevices","fetchDevices","get","then","response","data","status","device","devicesArray","Object","keys","map","key","name","error","console","log","selectedDevices","setSelectedDevices","handleSelect","deviceName","deviceIP","event","isChecked","target","checked","prevSelectedDevices","device_name","device_ip","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","type","onChange","_c","$RefreshReg$"],"sources":["/Users/nc/Desktop/BOT/UI/src/Pages/selectDevice.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nconst DeviceList = ({selected}) => {\n    const [devices, setDevices] = useState([])\n\n    const fetchDevices = async () => {\n        try {\n            await axios.get('http://127.0.0.1:5000/getAllDevices').then(response => {\n                if (response.data.status === 200) {\n                    const device = response.data.devices;\n                    const devicesArray = Object.keys(device).map((key) => ({\n                        name: key,\n                        ...device[key],\n                    }));\n                    setDevices(devicesArray);\n                }\n            })\n        }\n        catch (error) {\n            console.log(error)\n        }\n\n    }\n\n    useEffect(() => {\n        fetchDevices()\n    }, [])\n\n    const [selectedDevices, setSelectedDevices] = useState([])\n\n    const handleSelect = (deviceName,deviceIP) => (event) => {\n        const isChecked = event.target.checked;\n\n        setSelectedDevices((prevSelectedDevices) => {\n            if (isChecked) {\n                // Add the selected device to the selectedDevice state\n                return [...prevSelectedDevices,\n                    {device_name:deviceName,device_ip:deviceIP}\n                ];\n            } else {\n                // Remove the unchecked device from the selectedDevice state\n                return prevSelectedDevices.filter((device) => device !== deviceName);\n            }\n        });\n      \n\n    };\n\n    useEffect(()=>{\n        selected(selectedDevices)\n    },[selectedDevices])\n\n\n\n    return (\n        <div className=\"device-list\">\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <table className=\"table table-hovered\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>PC</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {\n                                devices.map((device, index) => (\n                                    <tr>\n                                        <td>\n                                            <input className=\"form-check-input device-checkbox\" type=\"checkbox\" onChange={handleSelect(device.device_name,device.device_ip)} />\n                                        </td>\n                                        <th>\n                                            {device.device_name}\n                                        </th>\n                                    </tr>\n                                ))\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DeviceList"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}