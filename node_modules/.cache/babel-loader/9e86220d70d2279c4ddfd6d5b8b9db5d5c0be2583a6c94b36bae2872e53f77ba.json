{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Wrapper for getting information from the Selenium Manager binaries\n */\n\nconst {\n  platform\n} = require('process');\nconst path = require('path');\nconst fs = require('fs');\nconst spawnSync = require('child_process').spawnSync;\n\n/**\n * currently supported browsers for selenium-manager\n * @type {string[]}\n */\nconst Browser = ['chrome', 'firefox', 'edge', 'MicrosoftEdge', 'iexplorer'];\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @returns {string}\n */\nfunction getBinary() {\n  const directory = {\n    darwin: 'macos',\n    win32: 'windows',\n    cygwin: 'windows',\n    linux: 'linux'\n  }[platform];\n  const file = directory === 'windows' ? 'selenium-manager.exe' : 'selenium-manager';\n  let seleniumManagerBasePath;\n  if (process.env.SELENIUM_MANAGER_BASE_PATH) {\n    seleniumManagerBasePath = process.env.SELENIUM_MANAGER_BASE_PATH;\n  } else {\n    seleniumManagerBasePath = path.join(__dirname, '..', '/bin');\n  }\n  const filePath = path.join(seleniumManagerBasePath, directory, file);\n  if (!fs.existsSync(filePath)) {\n    throw new Error(`Unable to obtain Selenium Manager`);\n  }\n  return filePath;\n}\n\n/**\n * Determines the path of the correct driver\n * @param {Capabilities} options browser options to fetch the driver\n * @returns {string} path of the driver location\n */\n\nfunction driverLocation(options) {\n  if (!Browser.includes(options.getBrowserName().toLocaleString())) {\n    throw new Error(`Unable to locate driver associated with browser name: ${options.getBrowserName()}`);\n  }\n  let args = ['--browser', options.getBrowserName(), '--output', 'json'];\n  if (options.getBrowserVersion() && options.getBrowserVersion() !== \"\") {\n    args.push(\"--browser-version\", options.getBrowserVersion());\n  }\n  const vendorOptions = options.get('goog:chromeOptions') || options.get('ms:edgeOptions') || options.get('moz:firefoxOptions');\n  if (vendorOptions && vendorOptions.binary && vendorOptions.binary !== \"\") {\n    args.push(\"--browser-path\", '\"' + vendorOptions.binary + '\"');\n  }\n  const smBinary = getBinary();\n  const spawnResult = spawnSync(smBinary, args);\n  let output;\n  if (spawnResult.status) {\n    let errorMessage;\n    if (spawnResult.stderr.toString()) {\n      errorMessage = spawnResult.stderr.toString();\n    }\n    if (spawnResult.stdout.toString()) {\n      try {\n        output = JSON.parse(spawnResult.stdout.toString());\n        errorMessage = output.result.message;\n      } catch (e) {\n        errorMessage = e.toString();\n      }\n    }\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${errorMessage}`);\n  }\n  try {\n    output = JSON.parse(spawnResult.stdout.toString());\n  } catch (e) {\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${e.toString()}`);\n  }\n  for (const key in output.logs) {\n    if (output.logs[key].level === 'WARN') {\n      console.warn(`${output.logs[key].message}`);\n    }\n  }\n  return output.result.message;\n}\n\n// PUBLIC API\nmodule.exports = {\n  driverLocation\n};","map":{"version":3,"names":["platform","require","path","fs","spawnSync","Browser","getBinary","directory","darwin","win32","cygwin","linux","file","seleniumManagerBasePath","process","env","SELENIUM_MANAGER_BASE_PATH","join","__dirname","filePath","existsSync","Error","driverLocation","options","includes","getBrowserName","toLocaleString","args","getBrowserVersion","push","vendorOptions","get","binary","smBinary","spawnResult","output","status","errorMessage","stderr","toString","stdout","JSON","parse","result","message","e","key","logs","level","console","warn","module","exports"],"sources":["/Users/nc/Desktop/BOT/UI/node_modules/selenium-webdriver/common/seleniumManager.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Wrapper for getting information from the Selenium Manager binaries\n */\n\nconst { platform } = require('process')\nconst path = require('path')\nconst fs = require('fs')\nconst spawnSync = require('child_process').spawnSync\n\n/**\n * currently supported browsers for selenium-manager\n * @type {string[]}\n */\nconst Browser = ['chrome', 'firefox', 'edge', 'MicrosoftEdge', 'iexplorer']\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @returns {string}\n */\nfunction getBinary() {\n  const directory = {\n    darwin: 'macos',\n    win32: 'windows',\n    cygwin: 'windows',\n    linux: 'linux',\n  }[platform]\n\n  const file =\n    directory === 'windows' ? 'selenium-manager.exe' : 'selenium-manager'\n\n  let seleniumManagerBasePath\n  if (process.env.SELENIUM_MANAGER_BASE_PATH) {\n    seleniumManagerBasePath = process.env.SELENIUM_MANAGER_BASE_PATH\n  } else {\n    seleniumManagerBasePath = path.join(__dirname, '..', '/bin')\n  }\n\n  const filePath = path.join(seleniumManagerBasePath, directory, file)\n\n  if (!fs.existsSync(filePath)) {\n    throw new Error(`Unable to obtain Selenium Manager`)\n  }\n\n  return filePath\n}\n\n/**\n * Determines the path of the correct driver\n * @param {Capabilities} options browser options to fetch the driver\n * @returns {string} path of the driver location\n */\n\nfunction driverLocation(options) {\n  if (!Browser.includes(options.getBrowserName().toLocaleString())) {\n    throw new Error(\n      `Unable to locate driver associated with browser name: ${options.getBrowserName()}`\n    )\n  }\n\n  let args = ['--browser', options.getBrowserName(), '--output', 'json']\n\n  if (options.getBrowserVersion() && options.getBrowserVersion() !== \"\") {\n    args.push(\"--browser-version\", options.getBrowserVersion())\n  }\n\n  const vendorOptions = options.get('goog:chromeOptions') || options.get('ms:edgeOptions')\n                        || options.get('moz:firefoxOptions')\n  if (vendorOptions && vendorOptions.binary && vendorOptions.binary !== \"\") {\n    args.push(\"--browser-path\", '\"' + vendorOptions.binary + '\"')\n  }\n\n  const smBinary = getBinary()\n  const spawnResult = spawnSync(smBinary, args)\n  let output\n  if (spawnResult.status) {\n    let errorMessage\n    if (spawnResult.stderr.toString()) {\n      errorMessage = spawnResult.stderr.toString()\n    }\n    if (spawnResult.stdout.toString()) {\n      try {\n        output = JSON.parse(spawnResult.stdout.toString())\n        errorMessage = output.result.message\n      } catch (e) {\n        errorMessage = e.toString()\n      }\n    }\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${errorMessage}`)\n  }\n  try {\n    output = JSON.parse(spawnResult.stdout.toString())\n  } catch (e) {\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${e.toString()}`)\n  }\n\n\n  for (const key in output.logs) {\n    if (output.logs[key].level === 'WARN') {\n      console.warn(`${output.logs[key].message}`)\n    }\n  }\n\n  return output.result.message\n}\n\n// PUBLIC API\nmodule.exports = { driverLocation }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAS,CAAC,GAAGC,OAAO,CAAC,SAAS,CAAC;AACvC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMG,SAAS,GAAGH,OAAO,CAAC,eAAe,CAAC,CAACG,SAAS;;AAEpD;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,eAAe,EAAE,WAAW,CAAC;;AAE3E;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAA,EAAG;EACnB,MAAMC,SAAS,GAAG;IAChBC,MAAM,EAAE,OAAO;IACfC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,SAAS;IACjBC,KAAK,EAAE;EACT,CAAC,CAACX,QAAQ,CAAC;EAEX,MAAMY,IAAI,GACRL,SAAS,KAAK,SAAS,GAAG,sBAAsB,GAAG,kBAAkB;EAEvE,IAAIM,uBAAuB;EAC3B,IAAIC,OAAO,CAACC,GAAG,CAACC,0BAA0B,EAAE;IAC1CH,uBAAuB,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;EAClE,CAAC,MAAM;IACLH,uBAAuB,GAAGX,IAAI,CAACe,IAAI,CAACC,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC;EAC9D;EAEA,MAAMC,QAAQ,GAAGjB,IAAI,CAACe,IAAI,CAACJ,uBAAuB,EAAEN,SAAS,EAAEK,IAAI,CAAC;EAEpE,IAAI,CAACT,EAAE,CAACiB,UAAU,CAACD,QAAQ,CAAC,EAAE;IAC5B,MAAM,IAAIE,KAAK,CAAE,mCAAkC,CAAC;EACtD;EAEA,OAAOF,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASG,cAAcA,CAACC,OAAO,EAAE;EAC/B,IAAI,CAAClB,OAAO,CAACmB,QAAQ,CAACD,OAAO,CAACE,cAAc,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,EAAE;IAChE,MAAM,IAAIL,KAAK,CACZ,yDAAwDE,OAAO,CAACE,cAAc,CAAC,CAAE,EACpF,CAAC;EACH;EAEA,IAAIE,IAAI,GAAG,CAAC,WAAW,EAAEJ,OAAO,CAACE,cAAc,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC;EAEtE,IAAIF,OAAO,CAACK,iBAAiB,CAAC,CAAC,IAAIL,OAAO,CAACK,iBAAiB,CAAC,CAAC,KAAK,EAAE,EAAE;IACrED,IAAI,CAACE,IAAI,CAAC,mBAAmB,EAAEN,OAAO,CAACK,iBAAiB,CAAC,CAAC,CAAC;EAC7D;EAEA,MAAME,aAAa,GAAGP,OAAO,CAACQ,GAAG,CAAC,oBAAoB,CAAC,IAAIR,OAAO,CAACQ,GAAG,CAAC,gBAAgB,CAAC,IAC/DR,OAAO,CAACQ,GAAG,CAAC,oBAAoB,CAAC;EAC1D,IAAID,aAAa,IAAIA,aAAa,CAACE,MAAM,IAAIF,aAAa,CAACE,MAAM,KAAK,EAAE,EAAE;IACxEL,IAAI,CAACE,IAAI,CAAC,gBAAgB,EAAE,GAAG,GAAGC,aAAa,CAACE,MAAM,GAAG,GAAG,CAAC;EAC/D;EAEA,MAAMC,QAAQ,GAAG3B,SAAS,CAAC,CAAC;EAC5B,MAAM4B,WAAW,GAAG9B,SAAS,CAAC6B,QAAQ,EAAEN,IAAI,CAAC;EAC7C,IAAIQ,MAAM;EACV,IAAID,WAAW,CAACE,MAAM,EAAE;IACtB,IAAIC,YAAY;IAChB,IAAIH,WAAW,CAACI,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE;MACjCF,YAAY,GAAGH,WAAW,CAACI,MAAM,CAACC,QAAQ,CAAC,CAAC;IAC9C;IACA,IAAIL,WAAW,CAACM,MAAM,CAACD,QAAQ,CAAC,CAAC,EAAE;MACjC,IAAI;QACFJ,MAAM,GAAGM,IAAI,CAACC,KAAK,CAACR,WAAW,CAACM,MAAM,CAACD,QAAQ,CAAC,CAAC,CAAC;QAClDF,YAAY,GAAGF,MAAM,CAACQ,MAAM,CAACC,OAAO;MACtC,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVR,YAAY,GAAGQ,CAAC,CAACN,QAAQ,CAAC,CAAC;MAC7B;IACF;IACA,MAAM,IAAIlB,KAAK,CAAE,+BAA8BY,QAAS,SAAQN,IAAK,KAAIU,YAAa,EAAC,CAAC;EAC1F;EACA,IAAI;IACFF,MAAM,GAAGM,IAAI,CAACC,KAAK,CAACR,WAAW,CAACM,MAAM,CAACD,QAAQ,CAAC,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOM,CAAC,EAAE;IACV,MAAM,IAAIxB,KAAK,CAAE,+BAA8BY,QAAS,SAAQN,IAAK,KAAIkB,CAAC,CAACN,QAAQ,CAAC,CAAE,EAAC,CAAC;EAC1F;EAGA,KAAK,MAAMO,GAAG,IAAIX,MAAM,CAACY,IAAI,EAAE;IAC7B,IAAIZ,MAAM,CAACY,IAAI,CAACD,GAAG,CAAC,CAACE,KAAK,KAAK,MAAM,EAAE;MACrCC,OAAO,CAACC,IAAI,CAAE,GAAEf,MAAM,CAACY,IAAI,CAACD,GAAG,CAAC,CAACF,OAAQ,EAAC,CAAC;IAC7C;EACF;EAEA,OAAOT,MAAM,CAACQ,MAAM,CAACC,OAAO;AAC9B;;AAEA;AACAO,MAAM,CAACC,OAAO,GAAG;EAAE9B;AAAe,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}