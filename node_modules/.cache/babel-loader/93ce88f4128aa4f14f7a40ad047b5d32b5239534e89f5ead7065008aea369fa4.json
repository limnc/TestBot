{"ast":null,"code":"import { collection, addDoc, getDocs, updateDoc, deleteDoc, getDoc, doc, setDoc, query, where } from \"firebase/firestore\";\nimport database from \"../firebase\";\n\n//declared collection\nconst accountCollectionRef = collection(database, 'Accounts');\nexport const getAllAcc = async () => {\n  try {\n    const data = await getDocs(accountCollectionRef);\n    const account = data.docs.map(doc => ({\n      ...doc.data(),\n      id: doc.id\n    }));\n    console.log(account);\n    return account;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const retrieveAcc = async accountID => {\n  try {\n    const accountRef = doc(accountCollectionRef, accountID);\n    const accountDoc = await getDoc(accountRef);\n    if (accountDoc.exists()) {\n      return {\n        id: accountDoc.id,\n        ...accountDoc.data()\n      };\n    }\n  } catch (error) {\n    throw new Error(\"Failed to retrieve account\");\n  }\n};\nexport const createAcc = async accountData => {\n  try {\n    const accountRef = doc(accountCollectionRef, accountData.id);\n    await setDoc(accountRef, accountData);\n    return true;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateAcc = async (accountID, accountData) => {};\nexport const deleteAcc = async accountID => {};\nexport const getAccountByDevice = async deviceID => {\n  const accountList = [];\n  try {\n    //use Query to look for which account has the device_id match with deviceID\n    const account_query = query(collection(database, \"Accounts\"), where(\"device_id\", \"==\", deviceID));\n    const snapshot = await getDocs(account_query);\n    console.log(snapshot.size);\n    if (snapshot.size > 0) {\n      snapshot.forEach(doc => {\n        // console.log(doc.id, \" => \", doc.data()['name']);\n        accountList.push({\n          id: doc.id,\n          account_id: doc.data().id\n        });\n      });\n      return accountList;\n      // accountList.forEach((acc)=>{\n      //     console.log(acc.account_id)\n      // })\n    } else {\n      return [];\n      console.log(\"No account found\");\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["collection","addDoc","getDocs","updateDoc","deleteDoc","getDoc","doc","setDoc","query","where","database","accountCollectionRef","getAllAcc","data","account","docs","map","id","console","log","error","retrieveAcc","accountID","accountRef","accountDoc","exists","Error","createAcc","accountData","updateAcc","deleteAcc","getAccountByDevice","deviceID","accountList","account_query","snapshot","size","forEach","push","account_id"],"sources":["/Users/nc/Desktop/BOT/UI/src/Repositories/accountRepos.js"],"sourcesContent":["import { collection, addDoc, getDocs, updateDoc, deleteDoc, getDoc, doc, setDoc, query,where} from \"firebase/firestore\"\nimport database from \"../firebase\"\n\n//declared collection\nconst accountCollectionRef = collection(database, 'Accounts')\nexport const getAllAcc = async () => {\n    try {\n        const data = await getDocs(accountCollectionRef);\n        const account = data.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\n        console.log(account)\n        return account\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\nexport const retrieveAcc = async (accountID) => {\n    try {\n        const accountRef = doc(accountCollectionRef, accountID)\n        const accountDoc = await getDoc(accountRef)\n        if (accountDoc.exists()) {\n            return { id: accountDoc.id, ...accountDoc.data() };\n        }\n    } catch (error) {\n        throw new Error(\"Failed to retrieve account\")\n    }\n}\n\nexport const createAcc = async (accountData) => {\n    try {\n        const accountRef = doc(accountCollectionRef, accountData.id)\n        await setDoc(accountRef, accountData)\n        return true\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const updateAcc = async (accountID, accountData) => {\n\n}\n\nexport const deleteAcc = async (accountID) => {\n\n\n}\n\nexport const getAccountByDevice = async (deviceID) => {\n    const accountList = []\n    try {\n        //use Query to look for which account has the device_id match with deviceID\n        const account_query = query(collection(database,\"Accounts\"),where(\"device_id\",\"==\",deviceID));\n        const snapshot = await getDocs(account_query)\n        console.log(snapshot.size)\n        if (snapshot.size> 0){\n            snapshot.forEach((doc)=>{\n               // console.log(doc.id, \" => \", doc.data()['name']);\n                accountList.push({id:doc.id,account_id:doc.data().id})\n                \n            })\n            return accountList\n            // accountList.forEach((acc)=>{\n            //     console.log(acc.account_id)\n            // })\n        }\n        else{\n            return []\n            console.log(\"No account found\")\n        }\n\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}