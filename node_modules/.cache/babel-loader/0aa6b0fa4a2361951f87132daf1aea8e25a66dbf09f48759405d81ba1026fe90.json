{"ast":null,"code":"import { collection, addDoc, getDocs, updateDoc, deleteDoc, getDoc, doc, setDoc } from \"firebase/firestore\";\nimport database from \"../firebase\";\nfunction generateID() {\n  const currentTime = Date.now().toString();\n  return 'PC' + currentTime;\n}\nconst agencyRef = agencyID => {\n  return doc(database, 'Agency', agencyID);\n};\nexport const createDevice = async (agencyID, deviceData) => {\n  try {\n    const agencyRef = doc(database, 'Agency', agencyID);\n    const deviceCollectionRef = collection(agencyRef, 'devices');\n    const deviceID = generateID();\n    const newData = {\n      ...deviceData,\n      device_id: deviceID\n    };\n    await setDoc(doc(deviceCollectionRef, deviceID), newData);\n    return true;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const retrieveDevice = async (agencyID, deviceID) => {\n  try {\n    const deviceRef = doc(collection(database, 'Agency', agencyID, 'devices'), deviceID);\n    const deviceDoc = await getDoc(deviceRef);\n    if (deviceDoc.exists()) {\n      const deviceData = deviceDoc.data();\n      return {\n        id: deviceData,\n        ...deviceData\n      };\n    } else {\n      throw new Error(\"Device not found\");\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getDevices = async agencyID => {\n  try {\n    const agencyRef = doc(collection(database, 'Agency'), agencyID);\n    const agencySnapshot = await getDoc(agencyRef);\n    if (agencySnapshot.exists()) {\n      const agencyData = agencySnapshot.data();\n      const devicesData = agencyData.devices;\n      if (devicesData) {\n        const devicesArray = Object.values(agencyData.devices);\n        return devicesArray;\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["collection","addDoc","getDocs","updateDoc","deleteDoc","getDoc","doc","setDoc","database","generateID","currentTime","Date","now","toString","agencyRef","agencyID","createDevice","deviceData","deviceCollectionRef","deviceID","newData","device_id","error","console","log","retrieveDevice","deviceRef","deviceDoc","exists","data","id","Error","getDevices","agencySnapshot","agencyData","devicesData","devices","devicesArray","Object","values"],"sources":["/Users/nc/Desktop/BOT/UI/src/Repositories/deviceRepos.js"],"sourcesContent":["import {collection, addDoc, getDocs,updateDoc,deleteDoc, getDoc,doc,setDoc} from \"firebase/firestore\"\nimport database from \"../firebase\"\n\nfunction generateID() {\n    const currentTime = Date.now().toString();\n    return 'PC' + currentTime;\n  }\n  \n\nconst agencyRef = (agencyID) =>{\n    return doc(database,'Agency',agencyID)\n\n}\n\nexport const createDevice = async(agencyID,deviceData) =>{\n    try{\n        const agencyRef = doc(database,'Agency',agencyID)\n        const deviceCollectionRef = collection(agencyRef,'devices')\n        const deviceID = generateID()\n        const newData = {...deviceData,device_id:deviceID}\n        await setDoc(doc(deviceCollectionRef,deviceID),newData)\n        return true\n    }\n    catch(error){\n        console.log(error)\n    }\n}\n\nexport const retrieveDevice = async(agencyID,deviceID) =>{\n    try{\n        const deviceRef = doc(collection(database,'Agency',agencyID,'devices'),deviceID)\n        const deviceDoc = await getDoc(deviceRef)\n\n        if(deviceDoc.exists()){\n            const deviceData = deviceDoc.data();\n            return {id:deviceData,...deviceData}\n        }\n        else{\n            throw new Error(\"Device not found\")\n        }\n\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const getDevices = async(agencyID) => {\n    try{\n        const agencyRef  = doc(collection(database,'Agency'),agencyID)\n        const agencySnapshot = await getDoc(agencyRef)\n        if(agencySnapshot.exists()){\n            const agencyData = agencySnapshot.data()\n            const devicesData = agencyData.devices\n            if(devicesData){\n                const devicesArray = Object.values(agencyData.devices);\n                return devicesArray\n            }\n        }\n    }catch(error){\n        console.log(error)\n    }\n}"],"mappings":"AAAA,SAAQA,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAACC,SAAS,EAACC,SAAS,EAAEC,MAAM,EAACC,GAAG,EAACC,MAAM,QAAO,oBAAoB;AACrG,OAAOC,QAAQ,MAAM,aAAa;AAElC,SAASC,UAAUA,CAAA,EAAG;EAClB,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACzC,OAAO,IAAI,GAAGH,WAAW;AAC3B;AAGF,MAAMI,SAAS,GAAIC,QAAQ,IAAI;EAC3B,OAAOT,GAAG,CAACE,QAAQ,EAAC,QAAQ,EAACO,QAAQ,CAAC;AAE1C,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAMD,QAAQ,EAACE,UAAU,KAAI;EACrD,IAAG;IACC,MAAMH,SAAS,GAAGR,GAAG,CAACE,QAAQ,EAAC,QAAQ,EAACO,QAAQ,CAAC;IACjD,MAAMG,mBAAmB,GAAGlB,UAAU,CAACc,SAAS,EAAC,SAAS,CAAC;IAC3D,MAAMK,QAAQ,GAAGV,UAAU,CAAC,CAAC;IAC7B,MAAMW,OAAO,GAAG;MAAC,GAAGH,UAAU;MAACI,SAAS,EAACF;IAAQ,CAAC;IAClD,MAAMZ,MAAM,CAACD,GAAG,CAACY,mBAAmB,EAACC,QAAQ,CAAC,EAACC,OAAO,CAAC;IACvD,OAAO,IAAI;EACf,CAAC,CACD,OAAME,KAAK,EAAC;IACRC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAMV,QAAQ,EAACI,QAAQ,KAAI;EACrD,IAAG;IACC,MAAMO,SAAS,GAAGpB,GAAG,CAACN,UAAU,CAACQ,QAAQ,EAAC,QAAQ,EAACO,QAAQ,EAAC,SAAS,CAAC,EAACI,QAAQ,CAAC;IAChF,MAAMQ,SAAS,GAAG,MAAMtB,MAAM,CAACqB,SAAS,CAAC;IAEzC,IAAGC,SAAS,CAACC,MAAM,CAAC,CAAC,EAAC;MAClB,MAAMX,UAAU,GAAGU,SAAS,CAACE,IAAI,CAAC,CAAC;MACnC,OAAO;QAACC,EAAE,EAACb,UAAU;QAAC,GAAGA;MAAU,CAAC;IACxC,CAAC,MACG;MACA,MAAM,IAAIc,KAAK,CAAC,kBAAkB,CAAC;IACvC;EAEJ,CAAC,QAAMT,KAAK,EAAC;IACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMU,UAAU,GAAG,MAAMjB,QAAQ,IAAK;EACzC,IAAG;IACC,MAAMD,SAAS,GAAIR,GAAG,CAACN,UAAU,CAACQ,QAAQ,EAAC,QAAQ,CAAC,EAACO,QAAQ,CAAC;IAC9D,MAAMkB,cAAc,GAAG,MAAM5B,MAAM,CAACS,SAAS,CAAC;IAC9C,IAAGmB,cAAc,CAACL,MAAM,CAAC,CAAC,EAAC;MACvB,MAAMM,UAAU,GAAGD,cAAc,CAACJ,IAAI,CAAC,CAAC;MACxC,MAAMM,WAAW,GAAGD,UAAU,CAACE,OAAO;MACtC,IAAGD,WAAW,EAAC;QACX,MAAME,YAAY,GAAGC,MAAM,CAACC,MAAM,CAACL,UAAU,CAACE,OAAO,CAAC;QACtD,OAAOC,YAAY;MACvB;IACJ;EACJ,CAAC,QAAMf,KAAK,EAAC;IACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}