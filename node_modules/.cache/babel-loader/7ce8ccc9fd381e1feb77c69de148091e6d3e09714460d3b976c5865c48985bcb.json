{"ast":null,"code":"var _jsxFileName = \"/Users/nc/Desktop/BOT/UI/src/Pages/selectDevice.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { getDevices } from \"../Repositories/deviceRepos\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeviceList = _ref => {\n  _s();\n  let {\n    agent,\n    onSelectedDevicesChange\n  } = _ref;\n  const [devices, setDevices] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [message, setMessage] = useState('');\n  const [selectedDevices, setSelectedDevices] = useState([]);\n  const [renderDevices, setRenderDevices] = useState();\n  const fetchDevices = async () => {\n    // try {\n    //     await axios.get('http://127.0.0.1:5000/getAllDevices').then(response => {\n    //         if (response.data.status === 200) {\n    //             const device = response.data.devices;\n    //             const devicesArray = Object.keys(device).map((key) => ({\n    //                 name: key,\n    //                 ...device[key],\n    //             }));\n    //             setDevices(devicesArray);\n    //         }\n    //     })\n    // }\n    // catch (error) {\n    //     setMessage('Cannot connect to server')\n    //     setErrors(error)\n    // }\n\n    try {\n      const this_devices = await getDevices(agent);\n      setDevices(this_devices);\n      console.log(devices);\n      console.log(agent);\n    } catch (error) {}\n  };\n  useEffect(() => {\n    fetchDevices();\n    //setSelectedDevices([])\n  }, [agent]);\n  useEffect(() => {\n    let render = devices.map((device, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-check-input device-checkbox\",\n          type: \"checkbox\",\n          onChange: handleSelect(device.device_name, device.device_ip)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: device.device_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: device.device_ip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this));\n    setRenderDevices(render);\n  }, [devices]);\n  const handleSelect = (deviceName, deviceIP) => event => {\n    const isChecked = event.target.checked;\n\n    // setSelectedDevices((prevSelectedDevices) => {\n    //     if (isChecked) {\n    //         // Add the selected device to the selectedDevice state\n    //         return [...prevSelectedDevices,\n    //             {device_name:deviceName,device_ip:deviceIP}\n    //         ];\n    //     } else {\n    //         // Remove the unchecked device from the selectedDevice state\n    //         return prevSelectedDevices.filter((device) => device !== deviceName);\n    //     }\n    // });\n    if (isChecked) {\n      // Add the selected device to the selectedDevices state\n      const updatedDevices = [...selectedDevices, {\n        device_name: deviceName,\n        device_ip: deviceIP\n      }];\n      setSelectedDevices(updatedDevices);\n      //onSelectedDevicesChange(updatedDevices);\n    } else {\n      // Remove the unchecked device from the selectedDevices state\n      const updatedDevices = selectedDevices.filter(device => device.device_name !== deviceName);\n      setSelectedDevices(updatedDevices);\n      //onSelectedDevicesChange(updatedDevices);\n    }\n  };\n\n  useEffect(() => {\n    onSelectedDevicesChange(selectedDevices);\n  }, [selectedDevices]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"device-list\",\n    children: [errors != 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" alert alert-danger\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-hovered\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"IP address\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: renderDevices\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(DeviceList, \"j8J1RWCCHk1mRAKekM/w9CHGzdE=\");\n_c = DeviceList;\nexport default DeviceList;\nvar _c;\n$RefreshReg$(_c, \"DeviceList\");","map":{"version":3,"names":["useState","useEffect","axios","getDevices","jsxDEV","_jsxDEV","DeviceList","_ref","_s","agent","onSelectedDevicesChange","devices","setDevices","errors","setErrors","message","setMessage","selectedDevices","setSelectedDevices","renderDevices","setRenderDevices","fetchDevices","this_devices","console","log","error","render","map","device","index","children","className","type","onChange","handleSelect","device_name","device_ip","fileName","_jsxFileName","lineNumber","columnNumber","deviceName","deviceIP","event","isChecked","target","checked","updatedDevices","filter","_c","$RefreshReg$"],"sources":["/Users/nc/Desktop/BOT/UI/src/Pages/selectDevice.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\"\nimport axios from \"axios\"\nimport { getDevices } from \"../Repositories/deviceRepos\"\nconst DeviceList = ({ agent, onSelectedDevicesChange }) => {\n    const [devices, setDevices] = useState([])\n    const [errors, setErrors] = useState([])\n    const [message, setMessage] = useState('')\n    const [selectedDevices, setSelectedDevices] = useState([])\n    const [renderDevices, setRenderDevices] = useState()\n    const fetchDevices = async () => {\n        // try {\n        //     await axios.get('http://127.0.0.1:5000/getAllDevices').then(response => {\n        //         if (response.data.status === 200) {\n        //             const device = response.data.devices;\n        //             const devicesArray = Object.keys(device).map((key) => ({\n        //                 name: key,\n        //                 ...device[key],\n        //             }));\n        //             setDevices(devicesArray);\n        //         }\n        //     })\n        // }\n        // catch (error) {\n        //     setMessage('Cannot connect to server')\n        //     setErrors(error)\n        // }\n\n        try {\n            const this_devices = await getDevices(agent)\n            setDevices(this_devices)\n            console.log(devices)\n            console.log(agent)\n        }\n        catch (error) { }\n\n    }\n\n    useEffect(() => {\n        fetchDevices()\n        //setSelectedDevices([])\n    }, [agent])\n\n    useEffect(() => {\n        let render = devices.map((device, index) => (\n            <tr key={index}>\n                <td>\n                    <input className=\"form-check-input device-checkbox\" type=\"checkbox\" onChange={handleSelect(device.device_name, device.device_ip)} />\n                </td>\n                <th>\n                    {device.device_name}\n                </th>\n                <td>\n                    {device.device_ip}\n                </td>\n            </tr>\n        ))\n        setRenderDevices(render)\n    }, [devices])\n\n\n\n    const handleSelect = (deviceName, deviceIP) => (event) => {\n        const isChecked = event.target.checked;\n\n        // setSelectedDevices((prevSelectedDevices) => {\n        //     if (isChecked) {\n        //         // Add the selected device to the selectedDevice state\n        //         return [...prevSelectedDevices,\n        //             {device_name:deviceName,device_ip:deviceIP}\n        //         ];\n        //     } else {\n        //         // Remove the unchecked device from the selectedDevice state\n        //         return prevSelectedDevices.filter((device) => device !== deviceName);\n        //     }\n        // });\n        if (isChecked) {\n            // Add the selected device to the selectedDevices state\n            const updatedDevices = [...selectedDevices, { device_name: deviceName, device_ip: deviceIP }];\n            setSelectedDevices(updatedDevices);\n            //onSelectedDevicesChange(updatedDevices);\n        } else {\n            // Remove the unchecked device from the selectedDevices state\n            const updatedDevices = selectedDevices.filter(\n                (device) => device.device_name !== deviceName\n            );\n            setSelectedDevices(updatedDevices);\n            //onSelectedDevicesChange(updatedDevices);\n        }\n\n\n    };\n\n    useEffect(() => {\n        onSelectedDevicesChange(selectedDevices)\n    }, [selectedDevices])\n\n\n\n    return (\n        <div className=\"device-list\">\n            {\n                errors != 0 &&\n                <div className=\"alert-div\">\n                    <div className=\" alert alert-danger\">{message}</div>\n                </div>\n            }\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <table className=\"table table-hovered\">\n                        <thead>\n                            <tr>\n                                <th>Select</th>\n                                <th>PC</th>\n                                <th>IP address</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {/* {\n                              devices.map((device, index) => (\n                                    <tr key={index}>\n                                        <td>\n                                            <input className=\"form-check-input device-checkbox\" type=\"checkbox\" onChange={handleSelect(device.device_name,device.device_ip)} />\n                                        </td>\n                                        <th>\n                                            {device.device_name}\n                                        </th>\n                                        <td>\n                                            {device.device_ip}\n                                        </td>\n                                    </tr>\n                                ))\n                            } */}\n                            {renderDevices}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DeviceList"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}