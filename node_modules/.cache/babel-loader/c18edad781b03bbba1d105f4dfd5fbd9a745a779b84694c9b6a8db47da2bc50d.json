{"ast":null,"code":"import { collection, addDoc, getDocs, updateDoc, deleteDoc, getDoc, doc, setDoc } from \"firebase/firestore\";\nimport database from \"../firebase\";\nconst agencyCollectionRef = collection(database, 'Agency');\nconst generateAgencyId = () => {\n  // Implement your logic to generate a unique agency_id\n  // You can use a library or custom logic to generate the ID\n  // For example, you can use a combination of timestamp and random number\n  const timestamp = Date.now();\n  const randomNum = Math.floor(Math.random() * 10000);\n  const agencyId = `AG${timestamp}${randomNum}`;\n  return agencyId;\n};\nexport const getAllAgents = async () => {\n  try {\n    const querySnapshot = await getDocs(agencyCollectionRef);\n    const agents = querySnapshot.docs.map(doc => ({\n      ...doc.data(),\n      id: doc.id\n    }));\n    return agents;\n  } catch (error) {\n    // Handle error\n    console.error('Error getting agents:', error);\n    throw error;\n  }\n};\nexport const createAgency = async data => {\n  const agencyId = generateAgencyId();\n  const newData = {\n    ...data,\n    id: agencyId\n  };\n  try {\n    // const newAgent = await database.collection('Agency').doc(data.name)\n    // return newAgent.setDoc(data)\n\n    await setDoc(doc(agencyCollectionRef, agencyId), newData);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteAgency = async agentID => {\n  try {\n    await deleteDoc(doc(agencyCollectionRef, agentID));\n    return true;\n  } catch (error) {}\n};\nexport const getAgent = async agentID => {\n  try {\n    const agent = await getDoc(doc(agencyCollectionRef, agentID));\n    if (agent.exists()) {\n      return {\n        id: agent.id,\n        ...agent.data()\n      };\n    }\n  } catch (error) {}\n};\nexport const updateAgent = async (id, data) => {\n  try {\n    const agent = doc(database, \"Agency\", id);\n    await updateDoc(agent, data);\n    return true;\n  } catch (error) {}\n};\nexport const getPassword = async agentID => {\n  try {\n    const agencyRef = doc(agencyCollectionRef, agentID);\n    const agent = await getDoc(agencyRef);\n    if (agent.exists()) {\n      return agent.data('password');\n    }\n  } catch (error) {}\n};","map":{"version":3,"names":["collection","addDoc","getDocs","updateDoc","deleteDoc","getDoc","doc","setDoc","database","agencyCollectionRef","generateAgencyId","timestamp","Date","now","randomNum","Math","floor","random","agencyId","getAllAgents","querySnapshot","agents","docs","map","data","id","error","console","createAgency","newData","log","deleteAgency","agentID","getAgent","agent","exists","updateAgent","getPassword","agencyRef"],"sources":["/Users/nc/Desktop/BOT/UI/src/Repositories/agencyRepos.js"],"sourcesContent":["import {collection, addDoc, getDocs,updateDoc,deleteDoc, getDoc,doc,setDoc} from \"firebase/firestore\"\nimport database from \"../firebase\"\n\nconst agencyCollectionRef = collection(database,'Agency')\nconst generateAgencyId = () => {\n    // Implement your logic to generate a unique agency_id\n    // You can use a library or custom logic to generate the ID\n    // For example, you can use a combination of timestamp and random number\n    const timestamp = Date.now();\n    const randomNum = Math.floor(Math.random() * 10000);\n    const agencyId = `AG${timestamp}${randomNum}`;\n    return agencyId;\n  };\nexport const getAllAgents = async () => {\n  try {\n    const querySnapshot = await getDocs(agencyCollectionRef);\n    const agents = querySnapshot.docs.map((doc) => ({\n      ...doc.data(),\n      id: doc.id,\n    }));\n    return agents;\n  } catch (error) {\n    // Handle error\n    console.error('Error getting agents:', error);\n    throw error;\n  }\n};\n\nexport const createAgency = async(data) =>{\n    const agencyId = generateAgencyId();\n    const newData = {...data,id:agencyId}\n    try{\n        // const newAgent = await database.collection('Agency').doc(data.name)\n        // return newAgent.setDoc(data)\n        \n        await setDoc(doc(agencyCollectionRef,agencyId),newData)\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const deleteAgency = async(agentID) =>{\n    try{\n        await deleteDoc(doc(agencyCollectionRef,agentID))\n        return true\n    }catch(error){}\n}\n\nexport const getAgent = async(agentID) =>{\n    try{\n        const agent = await getDoc(doc(agencyCollectionRef,agentID))\n        if(agent.exists()){\n           \n            return {id:agent.id,...agent.data()}\n        }\n    }\n    catch(error){\n    \n    }\n}\n\nexport const updateAgent = async(id,data)=>{\n\n    try{\n        const agent = doc(database,\"Agency\",id)\n        await updateDoc(agent,data)\n        return true\n    }catch(error){\n    \n    }\n}\n\nexport const getPassword = async(agentID)=>{\n    try{\n        const agencyRef = doc(agencyCollectionRef,agentID)\n        const agent = await getDoc(agencyRef)\n        if(agent.exists()){\n            return agent.data('password')\n        }\n    }\n    catch(error){\n    \n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}