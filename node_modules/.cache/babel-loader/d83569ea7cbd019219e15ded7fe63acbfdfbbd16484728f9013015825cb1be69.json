{"ast":null,"code":"import { collection, addDoc, getDocs, updateDoc, deleteDoc, getDoc, doc, setDoc } from \"firebase/firestore\";\nimport database from \"../firebase\";\nfunction generateID() {\n  const currentTime = Date.now().toString();\n  return 'PC' + currentTime;\n}\nconst agencyRef = agencyID => {\n  return doc(database, 'Agency', agencyID);\n};\nexport const createDevice = async (agencyID, deviceData) => {\n  try {\n    const agencyRef = doc(database, 'Agency', agencyID);\n    const deviceCollectionRef = collection(agencyRef, 'devices');\n    const deviceID = generateID();\n    const newData = {\n      ...deviceData,\n      device_id: deviceID\n    };\n    await setDoc(doc(deviceCollectionRef, deviceID), newData);\n    return true;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const retrieveDevice = async (agencyID, deviceID) => {\n  try {\n    // const deviceRef = doc(collection(database, 'Agency', agencyID, 'devices'), deviceID)\n    // const deviceDoc = await getDoc(deviceRef)\n\n    // if (deviceDoc.exists()) {\n    //     const deviceData = deviceDoc.data();\n    //     return { id: deviceData.device_id, ...deviceData }\n    // }\n    // else {\n    //     throw new Error(\"Device not found\")\n    // }\n\n    const deviceRef = doc(database, 'agency', agencyID, 'devices', deviceID);\n    const deviceSnapshot = await getDoc(deviceRef);\n    if (deviceSnapshot.exists()) {\n      const deviceData = deviceSnapshot.data();\n      return deviceData;\n    } else {\n      throw new Error('Device not found');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getDevices = async agencyID => {\n  try {\n    const agencyRef = doc(database, 'Agency', agencyID);\n    const deviceCollectionRef = collection(agencyRef, 'devices');\n    const devices = await getDocs(deviceCollectionRef);\n    const deviceArray = [];\n    devices.forEach(d => {\n      deviceArray.push({\n        id: d.device_id,\n        ...d.data()\n      });\n    });\n    return deviceArray;\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["collection","addDoc","getDocs","updateDoc","deleteDoc","getDoc","doc","setDoc","database","generateID","currentTime","Date","now","toString","agencyRef","agencyID","createDevice","deviceData","deviceCollectionRef","deviceID","newData","device_id","error","console","log","retrieveDevice","deviceRef","deviceSnapshot","exists","data","Error","getDevices","devices","deviceArray","forEach","d","push","id"],"sources":["/Users/nc/Desktop/BOT/UI/src/Repositories/deviceRepos.js"],"sourcesContent":["import { collection, addDoc, getDocs, updateDoc, deleteDoc, getDoc, doc, setDoc } from \"firebase/firestore\"\nimport database from \"../firebase\"\n\nfunction generateID() {\n    const currentTime = Date.now().toString();\n    return 'PC' + currentTime;\n}\n\n\nconst agencyRef = (agencyID) => {\n    return doc(database, 'Agency', agencyID)\n\n}\n\nexport const createDevice = async (agencyID, deviceData) => {\n    try {\n        const agencyRef = doc(database, 'Agency', agencyID)\n        const deviceCollectionRef = collection(agencyRef, 'devices')\n        const deviceID = generateID()\n        const newData = { ...deviceData, device_id: deviceID }\n        await setDoc(doc(deviceCollectionRef, deviceID), newData)\n        return true\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\n\nexport const retrieveDevice = async (agencyID, deviceID) => {\n    try {\n        // const deviceRef = doc(collection(database, 'Agency', agencyID, 'devices'), deviceID)\n        // const deviceDoc = await getDoc(deviceRef)\n\n        // if (deviceDoc.exists()) {\n        //     const deviceData = deviceDoc.data();\n        //     return { id: deviceData.device_id, ...deviceData }\n        // }\n        // else {\n        //     throw new Error(\"Device not found\")\n        // }\n\n        const deviceRef = doc(database, 'agency', agencyID, 'devices', deviceID);\n        const deviceSnapshot = await getDoc(deviceRef);\n\n        if (deviceSnapshot.exists()) {\n            const deviceData = deviceSnapshot.data();\n            return deviceData;\n        } else {\n            throw new Error('Device not found');\n        }\n\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const getDevices = async (agencyID) => {\n    try {\n\n        const agencyRef = doc(database, 'Agency', agencyID)\n        const deviceCollectionRef = collection(agencyRef, 'devices')\n        const devices = await getDocs(deviceCollectionRef)\n        const deviceArray = []\n        devices.forEach((d) => {\n            deviceArray.push({\n                id: d.device_id,\n                ...d.data(),\n            });\n        })\n        return deviceArray;\n\n\n    } catch (error) {\n        console.log(error);\n    }\n};\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAC3G,OAAOC,QAAQ,MAAM,aAAa;AAElC,SAASC,UAAUA,CAAA,EAAG;EAClB,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACzC,OAAO,IAAI,GAAGH,WAAW;AAC7B;AAGA,MAAMI,SAAS,GAAIC,QAAQ,IAAK;EAC5B,OAAOT,GAAG,CAACE,QAAQ,EAAE,QAAQ,EAAEO,QAAQ,CAAC;AAE5C,CAAC;AAED,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOD,QAAQ,EAAEE,UAAU,KAAK;EACxD,IAAI;IACA,MAAMH,SAAS,GAAGR,GAAG,CAACE,QAAQ,EAAE,QAAQ,EAAEO,QAAQ,CAAC;IACnD,MAAMG,mBAAmB,GAAGlB,UAAU,CAACc,SAAS,EAAE,SAAS,CAAC;IAC5D,MAAMK,QAAQ,GAAGV,UAAU,CAAC,CAAC;IAC7B,MAAMW,OAAO,GAAG;MAAE,GAAGH,UAAU;MAAEI,SAAS,EAAEF;IAAS,CAAC;IACtD,MAAMZ,MAAM,CAACD,GAAG,CAACY,mBAAmB,EAAEC,QAAQ,CAAC,EAAEC,OAAO,CAAC;IACzD,OAAO,IAAI;EACf,CAAC,CACD,OAAOE,KAAK,EAAE;IACVC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAOV,QAAQ,EAAEI,QAAQ,KAAK;EACxD,IAAI;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMO,SAAS,GAAGpB,GAAG,CAACE,QAAQ,EAAE,QAAQ,EAAEO,QAAQ,EAAE,SAAS,EAAEI,QAAQ,CAAC;IACxE,MAAMQ,cAAc,GAAG,MAAMtB,MAAM,CAACqB,SAAS,CAAC;IAE9C,IAAIC,cAAc,CAACC,MAAM,CAAC,CAAC,EAAE;MACzB,MAAMX,UAAU,GAAGU,cAAc,CAACE,IAAI,CAAC,CAAC;MACxC,OAAOZ,UAAU;IACrB,CAAC,MAAM;MACH,MAAM,IAAIa,KAAK,CAAC,kBAAkB,CAAC;IACvC;EAEJ,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMS,UAAU,GAAG,MAAOhB,QAAQ,IAAK;EAC1C,IAAI;IAEA,MAAMD,SAAS,GAAGR,GAAG,CAACE,QAAQ,EAAE,QAAQ,EAAEO,QAAQ,CAAC;IACnD,MAAMG,mBAAmB,GAAGlB,UAAU,CAACc,SAAS,EAAE,SAAS,CAAC;IAC5D,MAAMkB,OAAO,GAAG,MAAM9B,OAAO,CAACgB,mBAAmB,CAAC;IAClD,MAAMe,WAAW,GAAG,EAAE;IACtBD,OAAO,CAACE,OAAO,CAAEC,CAAC,IAAK;MACnBF,WAAW,CAACG,IAAI,CAAC;QACbC,EAAE,EAAEF,CAAC,CAACd,SAAS;QACf,GAAGc,CAAC,CAACN,IAAI,CAAC;MACd,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAOI,WAAW;EAGtB,CAAC,CAAC,OAAOX,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}